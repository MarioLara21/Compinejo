// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/CScanner.flex


import java_cup.runtime.Symbol;
import scanner.errors.err;
import scanner.errors.errors;
import scanner.symbols.sym;

@SuppressWarnings("fallthrough")
public class CScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\11\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\10\3\34"+
    "\1\35\1\36\1\34\21\37\1\40\2\37\1\41\1\42"+
    "\1\43\1\44\1\45\1\0\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\37\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\37\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\6\0\1\3\73\0\1\10\7\0\1\10"+
    "\3\0\1\10\3\0\1\10\1\0\1\10\6\0\1\10"+
    "\6\0\1\10\7\0\1\10\3\0\1\10\3\0\1\10"+
    "\1\0\1\10\6\0\1\10\u012d\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\2\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\1\17\26\1\32"+
    "\1\33\1\34\1\35\1\36\1\0\1\37\2\40\1\37"+
    "\1\41\1\42\1\43\1\44\1\0\1\45\1\46\1\17"+
    "\1\47\1\50\1\51\1\52\1\53\2\0\1\54\1\55"+
    "\1\56\1\17\2\41\1\57\1\60\1\61\1\62\1\63"+
    "\1\0\1\40\1\26\1\64\6\26\1\65\6\26\1\66"+
    "\13\26\1\67\1\70\2\0\1\53\1\56\2\53\1\56"+
    "\1\41\1\56\1\71\1\72\1\73\13\26\1\74\1\26"+
    "\1\75\17\26\1\76\1\0\2\53\1\56\1\53\1\77"+
    "\1\26\1\100\1\101\4\26\1\102\1\103\2\26\1\104"+
    "\1\105\13\26\1\106\2\26\1\0\1\107\1\110\4\26"+
    "\1\111\2\26\1\112\6\26\1\113\2\26\1\114\2\26"+
    "\1\115\1\116\1\26\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\4\26\1\125\1\26\1\126\2\26\1\127\1\130"+
    "\1\131\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c"+
    "\0\u01ce\0\u0210\0\102\0\102\0\u0252\0\u0294\0\102\0\u02d6"+
    "\0\u0318\0\u035a\0\u039c\0\u03de\0\102\0\102\0\u0420\0\u0462"+
    "\0\u04a4\0\102\0\u04e6\0\102\0\102\0\u0528\0\u056a\0\u05ac"+
    "\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc"+
    "\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\102\0\u098a"+
    "\0\102\0\102\0\102\0\u09cc\0\102\0\u0a0e\0\u0a50\0\u0108"+
    "\0\u014a\0\u014a\0\u014a\0\u014a\0\u0a92\0\u014a\0\u014a\0\u0ad4"+
    "\0\u014a\0\u014a\0\u014a\0\102\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc"+
    "\0\102\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\102\0\u014a"+
    "\0\102\0\u0d68\0\u056a\0\102\0\u0daa\0\102\0\u0dec\0\u0e2e"+
    "\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e"+
    "\0\u1080\0\u10c2\0\u1104\0\u04e6\0\u1146\0\u1188\0\u11ca\0\u120c"+
    "\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\102"+
    "\0\102\0\u0b16\0\u141c\0\102\0\u145e\0\u14a0\0\u14e2\0\u1524"+
    "\0\u1566\0\u1566\0\u0ce4\0\102\0\102\0\u15a8\0\u15ea\0\u162c"+
    "\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c"+
    "\0\u04e6\0\u187e\0\u04e6\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8"+
    "\0\u1c1a\0\u1c5c\0\102\0\u1c9e\0\u1ce0\0\u1d22\0\u1d22\0\u1c9e"+
    "\0\u04e6\0\u1d64\0\u04e6\0\u04e6\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c"+
    "\0\u04e6\0\u04e6\0\u1eae\0\u1ef0\0\u04e6\0\u04e6\0\u1f32\0\u1f74"+
    "\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184"+
    "\0\u21c6\0\u04e6\0\u2208\0\u224a\0\u1d22\0\u04e6\0\u04e6\0\u228c"+
    "\0\u22ce\0\u2310\0\u2352\0\u04e6\0\u2394\0\u23d6\0\u04e6\0\u2418"+
    "\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u04e6\0\u25a4\0\u25e6"+
    "\0\u04e6\0\u2628\0\u266a\0\u04e6\0\u04e6\0\u26ac\0\u04e6\0\u04e6"+
    "\0\u04e6\0\u04e6\0\u04e6\0\u04e6\0\u26ee\0\u2730\0\u2772\0\u27b4"+
    "\0\u04e6\0\u27f6\0\u04e6\0\u2838\0\u287a\0\u04e6\0\u04e6\0\u04e6"+
    "\0\u04e6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\5\33\1\34\1\2\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\33\1\47\1\33\1\50\4\33\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\3\33\1\57\1\60\1\61\1\62"+
    "\133\0\1\63\50\0\6\64\1\65\25\64\5\66\1\64"+
    "\1\0\2\64\15\66\1\67\13\66\4\64\24\0\2\70"+
    "\64\0\3\71\3\0\2\71\1\0\1\71\2\0\2\71"+
    "\3\0\1\71\2\0\5\71\5\0\30\71\14\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\71\3\0\1\72"+
    "\2\0\5\71\5\0\30\71\14\0\2\71\1\73\3\0"+
    "\2\71\1\0\1\71\2\0\2\71\3\0\1\74\2\0"+
    "\5\71\5\0\30\71\4\0\13\75\1\0\66\75\10\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\71\3\0"+
    "\1\76\2\0\5\71\5\0\30\71\14\0\3\71\3\0"+
    "\1\71\1\77\1\0\1\71\2\0\2\100\3\0\1\101"+
    "\2\0\5\71\5\0\30\71\14\0\3\71\3\0\2\71"+
    "\1\0\1\102\2\0\2\100\3\0\1\103\1\104\1\0"+
    "\5\71\5\0\30\71\30\0\2\105\10\0\1\106\13\0"+
    "\1\106\45\0\1\107\4\0\1\110\5\0\1\111\60\0"+
    "\3\71\3\0\2\71\1\0\1\71\1\112\1\0\2\113"+
    "\3\0\1\71\2\0\2\71\1\114\1\71\1\115\5\0"+
    "\4\71\1\114\20\71\1\115\2\71\14\0\3\71\3\0"+
    "\2\71\1\0\1\71\1\112\1\0\2\24\3\0\1\71"+
    "\2\0\2\71\1\114\2\71\5\0\4\71\1\114\23\71"+
    "\34\0\1\116\1\117\60\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\71\3\0\1\120\2\0\5\71\5\0"+
    "\30\71\35\0\1\121\1\122\53\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\30\33\35\0"+
    "\1\126\54\0\1\123\1\0\1\124\25\0\5\123\4\0"+
    "\31\123\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\22\33\1\127\5\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\17\33\1\130\10\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\1\131\6\33\1\132"+
    "\5\33\1\133\12\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\4\33\1\134\10\33"+
    "\1\135\12\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\12\33\1\136\1\33\1\137"+
    "\10\33\1\140\2\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\12\33\1\141\2\33"+
    "\1\142\12\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\15\33\1\143\12\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\5\33\1\144\6\33\1\145\13\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\15\33\1\146\12\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\4\33\1\147\23\33"+
    "\10\0\1\123\1\0\1\124\1\0\3\71\3\0\2\71"+
    "\1\0\1\71\2\0\2\125\3\0\1\71\2\0\5\33"+
    "\4\0\1\123\7\33\1\150\1\151\10\33\1\152\2\33"+
    "\1\153\3\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\26\33\1\154\1\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\14\33\1\155\13\33\10\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\15\33\1\156"+
    "\12\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\7\33\1\157\20\33\35\0\1\160"+
    "\45\0\1\161\2\0\6\64\1\65\33\64\1\0\17\64"+
    "\1\0\23\64\1\66\1\64\1\65\25\64\5\66\1\64"+
    "\1\0\2\64\15\66\1\67\13\66\4\64\4\0\1\67"+
    "\27\0\5\67\4\0\31\67\17\0\1\65\76\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\100\3\0\1\71"+
    "\2\0\5\71\5\0\30\71\30\0\2\105\73\0\1\162"+
    "\1\0\1\162\2\0\2\105\54\0\16\107\1\163\63\107"+
    "\2\110\1\0\77\110\24\164\2\165\7\164\1\166\1\167"+
    "\13\164\1\167\27\164\10\0\3\71\3\0\2\71\1\0"+
    "\1\71\1\170\1\0\2\113\3\0\1\71\2\0\2\71"+
    "\1\114\2\71\5\0\4\71\1\114\23\71\14\0\3\71"+
    "\3\0\1\71\1\171\1\0\1\171\2\0\2\172\3\0"+
    "\1\71\2\0\5\71\5\0\30\71\14\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\173\3\0\1\71\2\0"+
    "\3\173\2\71\5\0\6\173\22\71\35\0\1\174\101\0"+
    "\1\175\60\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\125\5\0\30\125\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\21\33\1\176\6\33\10\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\4\33\1\177"+
    "\23\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\20\33\1\200\7\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\1\201\27\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\14\33\1\202\13\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\5\33\1\203\22\33\10\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\22\33\1\204"+
    "\5\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\20\33\1\205\7\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\22\33\1\206\5\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\21\33\1\207\6\33"+
    "\10\0\1\123\1\0\1\124\1\0\3\71\3\0\2\71"+
    "\1\0\1\71\2\0\2\125\3\0\1\71\2\0\5\33"+
    "\4\0\1\123\15\33\1\210\12\33\10\0\1\123\1\0"+
    "\1\124\1\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\33\4\0\1\123\17\33"+
    "\1\211\10\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\21\33\1\212\6\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\21\33\1\213\6\33\10\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\14\33\1\214"+
    "\13\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\6\33\1\215\12\33\1\216\6\33"+
    "\10\0\1\123\1\0\1\124\1\0\3\71\3\0\2\71"+
    "\1\0\1\71\2\0\2\125\3\0\1\71\2\0\5\33"+
    "\4\0\1\123\15\33\1\217\12\33\10\0\1\123\1\0"+
    "\1\124\1\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\33\4\0\1\123\6\33"+
    "\1\220\20\33\1\221\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\1\222\16\33\1\223"+
    "\10\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\10\33\1\224\17\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\16\33\1\225\11\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\10\33\1\226\7\33"+
    "\1\227\7\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\10\33\1\230\1\33\1\231"+
    "\15\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\10\33\1\232\17\33\4\0\23\107"+
    "\1\233\56\107\24\0\2\165\10\0\1\234\13\0\1\234"+
    "\65\0\1\235\13\0\1\235\46\0\1\236\1\0\1\236"+
    "\2\0\2\237\54\0\24\164\2\165\10\164\1\240\13\164"+
    "\1\240\27\164\10\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\172\3\0\1\71\2\0\5\71\5\0\30\71"+
    "\10\0\1\123\1\0\1\124\1\0\3\71\3\0\2\71"+
    "\1\0\1\71\2\0\2\125\3\0\1\71\2\0\5\33"+
    "\4\0\1\123\15\33\1\241\12\33\10\0\1\123\1\0"+
    "\1\124\1\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\33\4\0\1\123\1\242"+
    "\27\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\4\33\1\243\23\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\17\33\1\244\10\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\20\33\1\245\1\246"+
    "\6\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\1\247\27\33\10\0\1\123\1\0"+
    "\1\124\1\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\33\4\0\1\123\1\33"+
    "\1\250\26\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\4\33\1\251\23\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\13\33\1\252\14\33\10\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\4\33\1\253"+
    "\23\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\1\254\27\33\10\0\1\123\1\0"+
    "\1\124\1\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\33\4\0\1\123\15\33"+
    "\1\255\12\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\6\33\1\256\21\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\10\33\1\257\17\33\10\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\22\33\1\260"+
    "\5\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\17\33\1\261\10\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\14\33\1\262\13\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\4\33\1\263\23\33"+
    "\10\0\1\123\1\0\1\124\1\0\3\71\3\0\2\71"+
    "\1\0\1\71\2\0\2\125\3\0\1\71\2\0\5\33"+
    "\4\0\1\123\21\33\1\264\6\33\10\0\1\123\1\0"+
    "\1\124\1\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\33\4\0\1\123\22\33"+
    "\1\265\5\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\21\33\1\266\6\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\4\33\1\267\23\33\10\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\15\33\1\270"+
    "\12\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\10\33\1\271\17\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\3\33\1\272\24\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\1\273\27\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\12\33\1\274\15\33\23\0\1\275\1\0\1\275"+
    "\2\0\2\237\73\0\1\164\1\0\1\164\104\0\2\237"+
    "\60\0\1\123\1\0\1\124\1\0\3\71\3\0\2\71"+
    "\1\0\1\71\2\0\2\125\3\0\1\71\2\0\5\33"+
    "\4\0\1\123\11\33\1\276\16\33\10\0\1\123\1\0"+
    "\1\124\1\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\33\4\0\1\123\21\33"+
    "\1\277\6\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\10\33\1\300\17\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\22\33\1\301\5\33\10\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\12\33\1\302"+
    "\15\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\17\33\1\303\10\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\21\33\1\304\6\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\20\33\1\305\7\33"+
    "\10\0\1\123\1\0\1\124\1\0\3\71\3\0\2\71"+
    "\1\0\1\71\2\0\2\125\3\0\1\71\2\0\5\33"+
    "\4\0\1\123\17\33\1\306\10\33\10\0\1\123\1\0"+
    "\1\124\1\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\33\4\0\1\123\21\33"+
    "\1\307\6\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\4\33\1\310\23\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\15\33\1\311\12\33\10\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\10\33\1\312"+
    "\17\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\2\33\1\313\25\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\2\33\1\314\25\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\3\33\1\315\24\33"+
    "\10\0\1\123\1\0\1\124\1\0\3\71\3\0\2\71"+
    "\1\0\1\71\2\0\2\125\3\0\1\71\2\0\5\33"+
    "\4\0\1\123\14\33\1\316\13\33\10\0\1\123\1\0"+
    "\1\124\1\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\33\4\0\1\123\6\33"+
    "\1\317\21\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\21\33\1\320\6\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\4\33\1\321\23\33\10\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\14\33\1\322"+
    "\13\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\12\33\1\323\15\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\4\33\1\324\23\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\14\33\1\325\13\33"+
    "\10\0\1\123\1\0\1\124\1\0\3\71\3\0\2\71"+
    "\1\0\1\71\2\0\2\125\3\0\1\71\2\0\5\33"+
    "\4\0\1\123\21\33\1\326\6\33\10\0\1\123\1\0"+
    "\1\124\1\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\33\4\0\1\123\14\33"+
    "\1\327\13\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\3\33\1\330\24\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\5\33\1\331\22\33\10\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\2\33\1\332"+
    "\25\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\21\33\1\333\6\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\7\33\1\334\20\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\4\33\1\335\23\33"+
    "\10\0\1\123\1\0\1\124\1\0\3\71\3\0\2\71"+
    "\1\0\1\71\2\0\2\125\3\0\1\71\2\0\5\33"+
    "\4\0\1\123\14\33\1\336\13\33\10\0\1\123\1\0"+
    "\1\124\1\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\33\4\0\1\123\10\33"+
    "\1\337\17\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\22\33\1\340\5\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\21\33\1\341\6\33\10\0\1\123\1\0\1\124"+
    "\1\0\3\71\3\0\2\71\1\0\1\71\2\0\2\125"+
    "\3\0\1\71\2\0\5\33\4\0\1\123\4\33\1\342"+
    "\23\33\10\0\1\123\1\0\1\124\1\0\3\71\3\0"+
    "\2\71\1\0\1\71\2\0\2\125\3\0\1\71\2\0"+
    "\5\33\4\0\1\123\5\33\1\343\22\33\10\0\1\123"+
    "\1\0\1\124\1\0\3\71\3\0\2\71\1\0\1\71"+
    "\2\0\2\125\3\0\1\71\2\0\5\33\4\0\1\123"+
    "\4\33\1\344\23\33\10\0\1\123\1\0\1\124\1\0"+
    "\3\71\3\0\2\71\1\0\1\71\2\0\2\125\3\0"+
    "\1\71\2\0\5\33\4\0\1\123\12\33\1\345\15\33"+
    "\10\0\1\123\1\0\1\124\1\0\3\71\3\0\2\71"+
    "\1\0\1\71\2\0\2\125\3\0\1\71\2\0\5\33"+
    "\4\0\1\123\4\33\1\346\23\33\10\0\1\123\1\0"+
    "\1\124\1\0\3\71\3\0\2\71\1\0\1\71\2\0"+
    "\2\125\3\0\1\71\2\0\5\33\4\0\1\123\17\33"+
    "\1\347\10\33\10\0\1\123\1\0\1\124\1\0\3\71"+
    "\3\0\2\71\1\0\1\71\2\0\2\125\3\0\1\71"+
    "\2\0\5\33\4\0\1\123\3\33\1\350\24\33\10\0"+
    "\1\123\1\0\1\124\1\0\3\71\3\0\2\71\1\0"+
    "\1\71\2\0\2\125\3\0\1\71\2\0\5\33\4\0"+
    "\1\123\4\33\1\351\23\33\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10428];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\7\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\1\1\2\11\21\1\1\11\1\1\3\11"+
    "\1\0\1\11\7\1\1\0\6\1\1\11\1\1\2\0"+
    "\1\1\1\11\5\1\1\11\1\1\1\11\1\1\1\0"+
    "\1\11\1\1\1\11\31\1\2\11\2\0\1\11\7\1"+
    "\2\11\35\1\1\11\1\0\40\1\1\0\54\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  public int getLine() { return yyline+1; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(err.errorMap.get(errors.UnexpectedLiteral));
            }
          // fall through
          case 91: break;
          case 2:
            { /* ignore whitespace */
            }
          // fall through
          case 92: break;
          case 3:
            { return new Symbol(sym.NOT);
            }
          // fall through
          case 93: break;
          case 4:
            { return new Symbol(sym.HASH);
            }
          // fall through
          case 94: break;
          case 5:
            { return new Symbol(sym.MODULO);
            }
          // fall through
          case 95: break;
          case 6:
            { return new Symbol(sym.AND);
            }
          // fall through
          case 96: break;
          case 7:
            { return new Symbol(sym.LPAREN);
            }
          // fall through
          case 97: break;
          case 8:
            { return new Symbol(sym.RPAREN);
            }
          // fall through
          case 98: break;
          case 9:
            { return new Symbol(sym.TIMES);
            }
          // fall through
          case 99: break;
          case 10:
            { return new Symbol(sym.PLUS);
            }
          // fall through
          case 100: break;
          case 11:
            { return new Symbol(sym.COMMA);
            }
          // fall through
          case 101: break;
          case 12:
            { return new Symbol(sym.MINUS);
            }
          // fall through
          case 102: break;
          case 13:
            { return new Symbol(sym.DOT);
            }
          // fall through
          case 103: break;
          case 14:
            { return new Symbol(sym.DIVIDE);
            }
          // fall through
          case 104: break;
          case 15:
            { return new Symbol(sym.NUM, Integer.parseInt(yytext()));
            }
          // fall through
          case 105: break;
          case 16:
            { return new Symbol(sym.COLON);
            }
          // fall through
          case 106: break;
          case 17:
            { return new Symbol(sym.SEMICOLON);
            }
          // fall through
          case 107: break;
          case 18:
            { return new Symbol(sym.LESS);
            }
          // fall through
          case 108: break;
          case 19:
            { return new Symbol(sym.ASSIGN);
            }
          // fall through
          case 109: break;
          case 20:
            { return new Symbol(sym.GREATER);
            }
          // fall through
          case 110: break;
          case 21:
            { return new Symbol(sym.QUESTION);
            }
          // fall through
          case 111: break;
          case 22:
            { return new Symbol(sym.ID, yytext());
            }
          // fall through
          case 112: break;
          case 23:
            { return new Symbol(sym.LBRACKET);
            }
          // fall through
          case 113: break;
          case 24:
            { return new Symbol(sym.RBRACKET);
            }
          // fall through
          case 114: break;
          case 25:
            { return new Symbol(sym.XOR);
            }
          // fall through
          case 115: break;
          case 26:
            { return new Symbol(sym.LBRACE);
            }
          // fall through
          case 116: break;
          case 27:
            { return new Symbol(sym.OR);
            }
          // fall through
          case 117: break;
          case 28:
            { return new Symbol(sym.RBRACE);
            }
          // fall through
          case 118: break;
          case 29:
            { return new Symbol(sym.TILDE);
            }
          // fall through
          case 119: break;
          case 30:
            { return new Symbol(sym.NOTEQUAL);
            }
          // fall through
          case 120: break;
          case 31:
            { return new Symbol(sym.STRING, yytext());
            }
          // fall through
          case 121: break;
          case 32:
            { return new Symbol(err.errorMap.get(errors.InvalidString));
            }
          // fall through
          case 122: break;
          case 33:
            { return new Symbol(err.errorMap.get(errors.InvalidIdentifier));
            }
          // fall through
          case 123: break;
          case 34:
            { return new Symbol(sym.MODULOEQUAL);
            }
          // fall through
          case 124: break;
          case 35:
            { return new Symbol(sym.ANDAND);
            }
          // fall through
          case 125: break;
          case 36:
            { return new Symbol(sym.ANDEQUAL);
            }
          // fall through
          case 126: break;
          case 37:
            { return new Symbol(sym.TIMESEQUAL);
            }
          // fall through
          case 127: break;
          case 38:
            { return new Symbol(sym.INCREMENT);
            }
          // fall through
          case 128: break;
          case 39:
            { return new Symbol(sym.PLUSEQUAL);
            }
          // fall through
          case 129: break;
          case 40:
            { return new Symbol(sym.DECREMENT);
            }
          // fall through
          case 130: break;
          case 41:
            { return new Symbol(sym.MINUSEQUAL);
            }
          // fall through
          case 131: break;
          case 42:
            { return new Symbol(sym.ARROW);
            }
          // fall through
          case 132: break;
          case 43:
            { return new Symbol(err.errorMap.get(errors.InvalidNumber));
            }
          // fall through
          case 133: break;
          case 44:
            { /* Ignore single-line comments */
            }
          // fall through
          case 134: break;
          case 45:
            { return new Symbol(sym.DIVIDEEQUAL);
            }
          // fall through
          case 135: break;
          case 46:
            { return new Symbol(sym.NUM, Double.parseDouble(yytext()));
            }
          // fall through
          case 136: break;
          case 47:
            { return new Symbol(sym.LSHIFT);
            }
          // fall through
          case 137: break;
          case 48:
            { return new Symbol(sym.LESSEQUAL);
            }
          // fall through
          case 138: break;
          case 49:
            { return new Symbol(sym.EQUALS);
            }
          // fall through
          case 139: break;
          case 50:
            { return new Symbol(sym.GREATEREQUAL);
            }
          // fall through
          case 140: break;
          case 51:
            { return new Symbol(sym.RSHIFT);
            }
          // fall through
          case 141: break;
          case 52:
            { return new Symbol(sym.XOREQUAL);
            }
          // fall through
          case 142: break;
          case 53:
            { return new Symbol(sym.DO);
            }
          // fall through
          case 143: break;
          case 54:
            { return new Symbol(sym.IF);
            }
          // fall through
          case 144: break;
          case 55:
            { return new Symbol(sym.OREQUAL);
            }
          // fall through
          case 145: break;
          case 56:
            { return new Symbol(sym.OROR);
            }
          // fall through
          case 146: break;
          case 57:
            { return new Symbol(sym.NUM, Integer.parseInt(yytext().substring(2), 16));
            }
          // fall through
          case 147: break;
          case 58:
            { return new Symbol(sym.LSHIFTEQUAL);
            }
          // fall through
          case 148: break;
          case 59:
            { return new Symbol(sym.RSHIFTEQUAL);
            }
          // fall through
          case 149: break;
          case 60:
            { return new Symbol(sym.FOR);
            }
          // fall through
          case 150: break;
          case 61:
            { return new Symbol(sym.INT);
            }
          // fall through
          case 151: break;
          case 62:
            { /* Handle comment here */
            }
          // fall through
          case 152: break;
          case 63:
            { return new Symbol(sym.AUTO);
            }
          // fall through
          case 153: break;
          case 64:
            { return new Symbol(sym.CASE);
            }
          // fall through
          case 154: break;
          case 65:
            { return new Symbol(sym.CHAR);
            }
          // fall through
          case 155: break;
          case 66:
            { return new Symbol(sym.ELSE);
            }
          // fall through
          case 156: break;
          case 67:
            { return new Symbol(sym.ENUM);
            }
          // fall through
          case 157: break;
          case 68:
            { return new Symbol(sym.GOTO);
            }
          // fall through
          case 158: break;
          case 69:
            { return new Symbol(sym.LONG);
            }
          // fall through
          case 159: break;
          case 70:
            { return new Symbol(sym.VOID);
            }
          // fall through
          case 160: break;
          case 71:
            { return new Symbol(sym.BREAK);
            }
          // fall through
          case 161: break;
          case 72:
            { return new Symbol(sym.CONST);
            }
          // fall through
          case 162: break;
          case 73:
            { return new Symbol(sym.FLOAT);
            }
          // fall through
          case 163: break;
          case 74:
            { return new Symbol(sym.SHORT);
            }
          // fall through
          case 164: break;
          case 75:
            { return new Symbol(sym.UNION);
            }
          // fall through
          case 165: break;
          case 76:
            { return new Symbol(sym.WHILE);
            }
          // fall through
          case 166: break;
          case 77:
            { return new Symbol(sym.DOUBLE);
            }
          // fall through
          case 167: break;
          case 78:
            { return new Symbol(sym.EXTERN);
            }
          // fall through
          case 168: break;
          case 79:
            { return new Symbol(sym.RETURN);
            }
          // fall through
          case 169: break;
          case 80:
            { return new Symbol(sym.SIGNED);
            }
          // fall through
          case 170: break;
          case 81:
            { return new Symbol(sym.SIZEOF);
            }
          // fall through
          case 171: break;
          case 82:
            { return new Symbol(sym.STATIC);
            }
          // fall through
          case 172: break;
          case 83:
            { return new Symbol(sym.STRUCT);
            }
          // fall through
          case 173: break;
          case 84:
            { return new Symbol(sym.SWITCH);
            }
          // fall through
          case 174: break;
          case 85:
            { return new Symbol(sym.DEFAULT);
            }
          // fall through
          case 175: break;
          case 86:
            { return new Symbol(sym.TYPEDEF);
            }
          // fall through
          case 176: break;
          case 87:
            { return new Symbol(sym.CONTINUE);
            }
          // fall through
          case 177: break;
          case 88:
            { return new Symbol(sym.REGISTER);
            }
          // fall through
          case 178: break;
          case 89:
            { return new Symbol(sym.UNSIGNED);
            }
          // fall through
          case 179: break;
          case 90:
            { return new Symbol(sym.VOLATILE);
            }
          // fall through
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
