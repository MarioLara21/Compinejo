// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/CScanner.flex


import java_cup.runtime.Symbol;
import scanner.errors.err;
import scanner.errors.errors;
import scanner.symbols.sym;

@SuppressWarnings("fallthrough")
public class CScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\37\u0100\1\u0400\u1000\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\4\1\5"+
    "\1\6\2\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\7\23\2\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\7\3\33"+
    "\1\34\1\35\1\33\21\36\1\37\2\36\1\40\1\0"+
    "\1\41\1\42\1\43\1\7\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\36\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\36\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\6\0\1\3\u01a2\0\2\3\326\0\u0100\3"+
    "\375\0\1\7\2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\1\17\25\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\2\35\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\35\2\0\1\50\1\35"+
    "\2\16\1\35\1\51\1\52\1\53\1\54\1\55\1\0"+
    "\1\25\1\0\1\56\6\25\1\57\6\25\1\60\13\25"+
    "\1\61\1\62\1\0\1\35\2\0\1\35\1\16\1\63"+
    "\1\64\13\25\1\65\1\25\1\66\17\25\1\0\1\35"+
    "\1\67\1\25\1\70\1\71\4\25\1\72\1\73\2\25"+
    "\1\74\1\75\13\25\1\76\2\25\1\77\2\0\1\35"+
    "\1\100\1\101\4\25\1\102\2\25\1\103\6\25\1\104"+
    "\2\25\1\105\2\0\2\25\1\106\1\107\1\25\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\3\25\2\0\1\25"+
    "\1\116\1\25\1\117\2\25\2\0\1\120\1\121\1\122"+
    "\1\123\15\0\1\124\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180"+
    "\0\100\0\100\0\u01c0\0\u0200\0\100\0\u0240\0\u0280\0\u02c0"+
    "\0\u0300\0\u0340\0\100\0\100\0\u0380\0\u03c0\0\u0400\0\100"+
    "\0\u0440\0\100\0\100\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580"+
    "\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780"+
    "\0\u07c0\0\u0800\0\u0840\0\u0880\0\100\0\u08c0\0\100\0\u0100"+
    "\0\u0100\0\100\0\u0900\0\u0940\0\100\0\u0100\0\100\0\100"+
    "\0\u0100\0\100\0\u0100\0\100\0\100\0\100\0\u0980\0\u09c0"+
    "\0\100\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\100\0\100"+
    "\0\100\0\u0b40\0\u0b80\0\u0bc0\0\u04c0\0\100\0\u0c00\0\u0c40"+
    "\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40"+
    "\0\u0e80\0\u0ec0\0\u0f00\0\u0440\0\u0f40\0\u0f80\0\u0fc0\0\u1000"+
    "\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\100"+
    "\0\100\0\u1200\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\100"+
    "\0\100\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0"+
    "\0\u1500\0\u1540\0\u1580\0\u15c0\0\u0440\0\u1600\0\u0440\0\u1640"+
    "\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840"+
    "\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u0440\0\u1a80\0\u0440\0\u0440\0\u1ac0\0\u1b00\0\u1b40\0\u1b80"+
    "\0\u0440\0\u0440\0\u1bc0\0\u1c00\0\u0440\0\u0440\0\u1c40\0\u1c80"+
    "\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80"+
    "\0\u1ec0\0\u0440\0\u1f00\0\u1f40\0\100\0\u1f80\0\u1fc0\0\u2000"+
    "\0\u0440\0\u0440\0\u2040\0\u2080\0\u20c0\0\u2100\0\u0440\0\u2140"+
    "\0\u2180\0\u0440\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300"+
    "\0\u0440\0\u2340\0\u2380\0\u0440\0\u23c0\0\u2400\0\u2440\0\u2480"+
    "\0\u0440\0\u0440\0\u24c0\0\u0440\0\u0440\0\u0440\0\u0440\0\u0440"+
    "\0\u0440\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u0440"+
    "\0\u2680\0\u0440\0\u26c0\0\u2700\0\u2740\0\u2780\0\u0440\0\u0440"+
    "\0\u0440\0\u0440\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900"+
    "\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00"+
    "\0\u2b40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\5\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\31\1\45\1\31"+
    "\1\46\4\31\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\3\31\1\55\1\56\1\57\1\60\105\0\1\61\1\0"+
    "\3\61\2\0\2\61\1\0\1\61\10\0\1\62\2\0"+
    "\5\63\3\0\31\63\3\0\1\61\33\0\5\64\3\0"+
    "\31\64\11\0\1\61\1\0\3\61\2\0\2\61\1\0"+
    "\1\61\13\0\5\63\3\0\31\63\3\0\1\61\5\0"+
    "\1\61\1\0\3\61\2\0\2\61\1\0\1\61\10\0"+
    "\1\65\2\0\5\63\3\0\31\63\3\0\1\61\5\0"+
    "\1\61\1\0\2\61\1\66\2\0\2\61\1\0\1\61"+
    "\10\0\1\67\2\0\5\63\3\0\31\63\3\0\1\61"+
    "\5\0\1\61\1\0\3\61\2\0\2\61\1\0\1\61"+
    "\10\0\1\70\2\0\5\63\3\0\31\63\3\0\1\61"+
    "\5\0\1\61\1\0\3\61\2\0\1\61\1\71\1\0"+
    "\1\61\10\0\1\72\2\0\5\63\3\0\31\63\3\0"+
    "\1\61\5\0\1\61\1\0\3\61\2\0\2\61\1\0"+
    "\1\73\10\0\1\74\1\75\1\0\5\63\3\0\31\63"+
    "\3\0\1\61\34\0\1\76\1\77\12\0\1\77\43\0"+
    "\1\100\13\0\1\101\67\0\1\102\1\0\2\103\1\104"+
    "\6\0\5\105\4\0\30\105\24\0\1\102\1\0\3\22"+
    "\6\0\5\105\4\0\30\105\33\0\1\106\1\107\77\0"+
    "\1\110\77\0\1\111\1\112\52\0\1\113\1\61\1\76"+
    "\3\61\2\0\2\61\1\0\1\61\2\0\3\114\6\0"+
    "\5\31\3\0\1\115\30\31\3\0\1\61\30\0\1\116"+
    "\53\0\1\113\1\61\1\76\3\61\2\0\2\61\1\0"+
    "\1\61\13\0\5\115\3\0\31\115\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\22\31\1\117"+
    "\5\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\17\31\1\120\10\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\1\121\6\31"+
    "\1\122\5\31\1\123\12\31\3\0\1\61\4\0\1\113"+
    "\1\61\1\76\3\61\2\0\2\61\1\0\1\61\2\0"+
    "\3\114\6\0\5\31\3\0\1\115\4\31\1\124\10\31"+
    "\1\125\12\31\3\0\1\61\4\0\1\113\1\61\1\76"+
    "\3\61\2\0\2\61\1\0\1\61\2\0\3\114\6\0"+
    "\5\31\3\0\1\115\12\31\1\126\1\31\1\127\10\31"+
    "\1\130\2\31\3\0\1\61\4\0\1\113\1\61\1\76"+
    "\3\61\2\0\2\61\1\0\1\61\2\0\3\114\6\0"+
    "\5\31\3\0\1\115\12\31\1\131\2\31\1\132\12\31"+
    "\3\0\1\61\4\0\1\113\1\61\1\76\3\61\2\0"+
    "\2\61\1\0\1\61\2\0\3\114\6\0\5\31\3\0"+
    "\1\115\15\31\1\133\12\31\3\0\1\61\4\0\1\113"+
    "\1\61\1\76\3\61\2\0\2\61\1\0\1\61\2\0"+
    "\3\114\6\0\5\31\3\0\1\115\5\31\1\134\6\31"+
    "\1\135\13\31\3\0\1\61\4\0\1\113\1\61\1\76"+
    "\3\61\2\0\2\61\1\0\1\61\2\0\3\114\6\0"+
    "\5\31\3\0\1\115\15\31\1\136\12\31\3\0\1\61"+
    "\4\0\1\113\1\61\1\76\3\61\2\0\2\61\1\0"+
    "\1\61\2\0\3\114\6\0\5\31\3\0\1\115\4\31"+
    "\1\137\23\31\3\0\1\61\4\0\1\113\1\61\1\76"+
    "\3\61\2\0\2\61\1\0\1\61\2\0\3\114\6\0"+
    "\5\31\3\0\1\115\7\31\1\140\1\141\10\31\1\142"+
    "\2\31\1\143\3\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\26\31\1\144\1\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\14\31\1\145\13\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\15\31\1\146\12\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\7\31\1\147\20\31\3\0\1\61\30\0\1\150\44\0"+
    "\1\151\35\0\5\63\3\0\31\63\10\0\1\64\26\0"+
    "\5\64\3\0\31\64\21\0\1\152\1\0\1\152\2\0"+
    "\3\153\53\0\14\100\1\154\63\100\34\0\1\155\1\156"+
    "\12\0\1\156\47\0\1\76\1\0\1\157\1\103\1\104"+
    "\6\0\5\105\4\0\30\105\24\0\1\76\1\0\3\104"+
    "\6\0\5\105\4\0\30\105\37\0\5\105\4\0\30\105"+
    "\34\0\1\160\77\0\1\161\53\0\1\113\1\0\1\76"+
    "\24\0\5\113\3\0\31\113\26\0\3\114\6\0\5\114"+
    "\4\0\30\114\10\0\1\113\1\61\1\76\3\61\2\0"+
    "\2\61\1\0\1\61\2\0\3\114\6\0\5\31\3\0"+
    "\1\115\21\31\1\162\6\31\3\0\1\61\4\0\1\113"+
    "\1\61\1\76\3\61\2\0\2\61\1\0\1\61\2\0"+
    "\3\114\6\0\5\31\3\0\1\115\4\31\1\163\23\31"+
    "\3\0\1\61\4\0\1\113\1\61\1\76\3\61\2\0"+
    "\2\61\1\0\1\61\2\0\3\114\6\0\5\31\3\0"+
    "\1\115\20\31\1\164\7\31\3\0\1\61\4\0\1\113"+
    "\1\61\1\76\3\61\2\0\2\61\1\0\1\61\2\0"+
    "\3\114\6\0\5\31\3\0\1\115\1\165\27\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\14\31\1\166\13\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\5\31\1\167\22\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\22\31\1\170\5\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\20\31\1\171\7\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\22\31\1\172\5\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\21\31\1\173\6\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\15\31\1\174\12\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\17\31\1\175\10\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\21\31\1\176\6\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\21\31\1\177\6\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\14\31\1\200\13\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\6\31\1\201\12\31\1\202"+
    "\6\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\15\31\1\203\12\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\6\31\1\204"+
    "\20\31\1\205\3\0\1\61\4\0\1\113\1\61\1\76"+
    "\3\61\2\0\2\61\1\0\1\61\2\0\3\114\6\0"+
    "\5\31\3\0\1\115\1\206\16\31\1\207\10\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\10\31\1\210\17\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\16\31\1\211\11\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\10\31\1\212\7\31\1\213\7\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\10\31\1\214"+
    "\1\31\1\215\15\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\10\31\1\216\17\31\3\0"+
    "\1\61\22\0\3\153\53\0\21\217\1\0\56\217\35\0"+
    "\1\156\12\0\1\156\44\0\1\76\1\0\1\76\100\0"+
    "\1\76\1\0\1\157\1\103\1\104\6\0\4\105\1\220"+
    "\4\0\25\105\1\220\2\105\10\0\1\113\1\61\1\76"+
    "\3\61\2\0\2\61\1\0\1\61\2\0\3\114\6\0"+
    "\5\31\3\0\1\115\15\31\1\221\12\31\3\0\1\61"+
    "\4\0\1\113\1\61\1\76\3\61\2\0\2\61\1\0"+
    "\1\61\2\0\3\114\6\0\5\31\3\0\1\115\1\222"+
    "\27\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\4\31\1\223\23\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\17\31\1\224"+
    "\10\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\20\31\1\225\1\226\6\31\3\0\1\61"+
    "\4\0\1\113\1\61\1\76\3\61\2\0\2\61\1\0"+
    "\1\61\2\0\3\114\6\0\5\31\3\0\1\115\1\227"+
    "\27\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\1\31\1\230\26\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\4\31\1\231"+
    "\23\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\13\31\1\232\14\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\4\31\1\233"+
    "\23\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\1\234\27\31\3\0\1\61\4\0\1\113"+
    "\1\61\1\76\3\61\2\0\2\61\1\0\1\61\2\0"+
    "\3\114\6\0\5\31\3\0\1\115\15\31\1\235\12\31"+
    "\3\0\1\61\4\0\1\113\1\61\1\76\3\61\2\0"+
    "\2\61\1\0\1\61\2\0\3\114\6\0\5\31\3\0"+
    "\1\115\6\31\1\236\21\31\3\0\1\61\4\0\1\113"+
    "\1\61\1\76\3\61\2\0\2\61\1\0\1\61\2\0"+
    "\3\114\6\0\5\31\3\0\1\115\10\31\1\237\17\31"+
    "\3\0\1\61\4\0\1\113\1\61\1\76\3\61\2\0"+
    "\2\61\1\0\1\61\2\0\3\114\6\0\5\31\3\0"+
    "\1\115\22\31\1\240\5\31\3\0\1\61\4\0\1\113"+
    "\1\61\1\76\3\61\2\0\2\61\1\0\1\61\2\0"+
    "\3\114\6\0\5\31\3\0\1\115\17\31\1\241\10\31"+
    "\3\0\1\61\4\0\1\113\1\61\1\76\3\61\2\0"+
    "\2\61\1\0\1\61\2\0\3\114\6\0\5\31\3\0"+
    "\1\115\14\31\1\242\13\31\3\0\1\61\4\0\1\113"+
    "\1\61\1\76\3\61\2\0\2\61\1\0\1\61\2\0"+
    "\3\114\6\0\5\31\3\0\1\115\4\31\1\243\23\31"+
    "\3\0\1\61\4\0\1\113\1\61\1\76\3\61\2\0"+
    "\2\61\1\0\1\61\2\0\3\114\6\0\5\31\3\0"+
    "\1\115\21\31\1\244\6\31\3\0\1\61\4\0\1\113"+
    "\1\61\1\76\3\61\2\0\2\61\1\0\1\61\2\0"+
    "\3\114\6\0\5\31\3\0\1\115\22\31\1\245\5\31"+
    "\3\0\1\61\4\0\1\113\1\61\1\76\3\61\2\0"+
    "\2\61\1\0\1\61\2\0\3\114\6\0\5\31\3\0"+
    "\1\115\21\31\1\246\6\31\3\0\1\61\4\0\1\113"+
    "\1\61\1\76\3\61\2\0\2\61\1\0\1\61\2\0"+
    "\3\114\6\0\5\31\3\0\1\115\4\31\1\247\23\31"+
    "\3\0\1\61\4\0\1\113\1\61\1\76\3\61\2\0"+
    "\2\61\1\0\1\61\2\0\3\114\6\0\5\31\3\0"+
    "\1\115\15\31\1\250\12\31\3\0\1\61\4\0\1\113"+
    "\1\61\1\76\3\61\2\0\2\61\1\0\1\61\2\0"+
    "\3\114\6\0\5\31\3\0\1\115\10\31\1\251\17\31"+
    "\3\0\1\61\4\0\1\113\1\61\1\76\3\61\2\0"+
    "\2\61\1\0\1\61\2\0\3\114\6\0\5\31\3\0"+
    "\1\115\3\31\1\252\24\31\3\0\1\61\4\0\1\113"+
    "\1\61\1\76\3\61\2\0\2\61\1\0\1\61\2\0"+
    "\3\114\6\0\5\31\3\0\1\115\1\253\27\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\12\31\1\254\15\31\3\0\1\61\14\0\1\217\4\0"+
    "\1\255\16\0\1\256\61\0\3\257\6\0\3\260\2\105"+
    "\4\0\6\260\22\105\10\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\11\31\1\261\16\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\21\31\1\262"+
    "\6\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\10\31\1\263\17\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\22\31\1\264"+
    "\5\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\12\31\1\265\15\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\17\31\1\266"+
    "\10\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\21\31\1\267\6\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\20\31\1\270"+
    "\7\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\17\31\1\271\10\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\21\31\1\272"+
    "\6\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\4\31\1\273\23\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\15\31\1\274"+
    "\12\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\10\31\1\275\17\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\2\31\1\276"+
    "\25\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\2\31\1\277\25\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\3\31\1\300"+
    "\24\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\14\31\1\301\13\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\6\31\1\302"+
    "\21\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\21\31\1\303\6\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\4\31\1\304"+
    "\23\31\3\0\1\61\42\0\1\305\57\0\3\306\6\0"+
    "\3\257\6\0\6\257\50\0\3\306\6\0\3\260\2\105"+
    "\4\0\6\260\22\105\10\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\14\31\1\307\13\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\12\31\1\310"+
    "\15\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\4\31\1\311\23\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\14\31\1\312"+
    "\13\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\21\31\1\313\6\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\14\31\1\314"+
    "\13\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\3\31\1\315\24\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\5\31\1\316"+
    "\22\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\2\31\1\317\25\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\21\31\1\320"+
    "\6\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\7\31\1\321\20\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\4\31\1\322"+
    "\23\31\3\0\1\61\4\0\1\113\1\61\1\76\3\61"+
    "\2\0\2\61\1\0\1\61\2\0\3\114\6\0\5\31"+
    "\3\0\1\115\14\31\1\323\13\31\3\0\1\61\4\0"+
    "\1\113\1\61\1\76\3\61\2\0\2\61\1\0\1\61"+
    "\2\0\3\114\6\0\5\31\3\0\1\115\10\31\1\324"+
    "\17\31\3\0\1\61\21\0\1\325\76\0\1\326\1\0"+
    "\3\306\6\0\3\257\6\0\6\257\32\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\22\31\1\327\5\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\21\31\1\330\6\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\4\31\1\331\23\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\5\31\1\332\22\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\4\31\1\333\23\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\12\31\1\334\15\31\3\0\1\61\41\0\1\217\60\0"+
    "\3\335\10\0\1\336\12\0\1\336\33\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\4\31\1\337\23\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\17\31\1\340\10\31\3\0\1\61\4\0\1\113\1\61"+
    "\1\76\3\61\2\0\2\61\1\0\1\61\2\0\3\114"+
    "\6\0\5\31\3\0\1\115\3\31\1\341\24\31\3\0"+
    "\1\61\4\0\1\113\1\61\1\76\3\61\2\0\2\61"+
    "\1\0\1\61\2\0\3\114\6\0\5\31\3\0\1\115"+
    "\4\31\1\342\23\31\3\0\1\61\22\0\3\335\10\0"+
    "\1\343\12\0\1\343\44\0\1\344\1\0\1\344\2\0"+
    "\3\345\70\0\1\346\1\0\1\346\2\0\3\347\75\0"+
    "\3\345\75\0\3\350\75\0\3\347\70\0\1\351\1\0"+
    "\1\351\2\0\3\352\75\0\3\350\10\0\1\353\12\0"+
    "\1\353\51\0\3\354\70\0\1\351\1\0\1\351\1\0"+
    "\1\355\3\352\10\0\1\353\12\0\1\353\44\0\1\356"+
    "\1\0\1\356\2\0\3\357\74\0\1\355\3\354\74\0"+
    "\1\360\100\0\3\357\70\0\1\351\1\0\1\351\2\0"+
    "\3\361\53\0\2\360\1\0\75\360\15\0\1\351\1\0"+
    "\1\351\1\0\1\355\3\361\53\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11136];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\1\1\2\11\21\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\11\1\1\2\11\1\1\1\11"+
    "\1\1\3\11\2\0\1\11\5\1\3\11\1\1\1\0"+
    "\1\1\1\0\1\11\31\1\2\11\1\0\1\1\2\0"+
    "\2\1\2\11\35\1\1\0\35\1\1\11\2\0\25\1"+
    "\2\0\16\1\2\0\6\1\2\0\4\1\15\0\1\1"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

  public int getLine() { return yyline+1; }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(err.errorMap.get(errors.UnexpectedLiteral));
            }
          // fall through
          case 87: break;
          case 2:
            { /* ignore whitespace */
            }
          // fall through
          case 88: break;
          case 3:
            { return new Symbol(sym.NOT);
            }
          // fall through
          case 89: break;
          case 4:
            { return new Symbol(sym.HASH);
            }
          // fall through
          case 90: break;
          case 5:
            { return new Symbol(sym.MODULO);
            }
          // fall through
          case 91: break;
          case 6:
            { return new Symbol(sym.AND);
            }
          // fall through
          case 92: break;
          case 7:
            { return new Symbol(sym.LPAREN);
            }
          // fall through
          case 93: break;
          case 8:
            { return new Symbol(sym.RPAREN);
            }
          // fall through
          case 94: break;
          case 9:
            { return new Symbol(sym.TIMES);
            }
          // fall through
          case 95: break;
          case 10:
            { return new Symbol(sym.PLUS);
            }
          // fall through
          case 96: break;
          case 11:
            { return new Symbol(sym.COMMA);
            }
          // fall through
          case 97: break;
          case 12:
            { return new Symbol(sym.MINUS);
            }
          // fall through
          case 98: break;
          case 13:
            { return new Symbol(sym.DOT);
            }
          // fall through
          case 99: break;
          case 14:
            { return new Symbol(sym.DIVIDE);
            }
          // fall through
          case 100: break;
          case 15:
            { return new Symbol(sym.NUM, Integer.parseInt(yytext()));
            }
          // fall through
          case 101: break;
          case 16:
            { return new Symbol(sym.COLON);
            }
          // fall through
          case 102: break;
          case 17:
            { return new Symbol(sym.SEMICOLON);
            }
          // fall through
          case 103: break;
          case 18:
            { return new Symbol(sym.LESS);
            }
          // fall through
          case 104: break;
          case 19:
            { return new Symbol(sym.ASSIGN);
            }
          // fall through
          case 105: break;
          case 20:
            { return new Symbol(sym.GREATER);
            }
          // fall through
          case 106: break;
          case 21:
            { return new Symbol(sym.QUESTION);
            }
          // fall through
          case 107: break;
          case 22:
            { return new Symbol(sym.ID, yytext());
            }
          // fall through
          case 108: break;
          case 23:
            { return new Symbol(sym.LBRACKET);
            }
          // fall through
          case 109: break;
          case 24:
            { return new Symbol(sym.RBRACKET);
            }
          // fall through
          case 110: break;
          case 25:
            { return new Symbol(sym.XOR);
            }
          // fall through
          case 111: break;
          case 26:
            { return new Symbol(sym.LBRACE);
            }
          // fall through
          case 112: break;
          case 29:
            { System.err.println("Invalid identifier: " + yytext());
            }
          // fall through
          case 113: break;
          case 30:
            { return new Symbol(sym.NOTEQUAL);
            }
          // fall through
          case 114: break;
          case 31:
            { return new Symbol(sym.MODULOEQUAL);
            }
          // fall through
          case 115: break;
          case 32:
            { return new Symbol(sym.ANDAND);
            }
          // fall through
          case 116: break;
          case 33:
            { return new Symbol(sym.ANDEQUAL);
            }
          // fall through
          case 117: break;
          case 34:
            { return new Symbol(sym.TIMESEQUAL);
            }
          // fall through
          case 118: break;
          case 35:
            { return new Symbol(sym.INCREMENT);
            }
          // fall through
          case 119: break;
          case 36:
            { return new Symbol(sym.PLUSEQUAL);
            }
          // fall through
          case 120: break;
          case 37:
            { return new Symbol(sym.DECREMENT);
            }
          // fall through
          case 121: break;
          case 38:
            { return new Symbol(sym.MINUSEQUAL);
            }
          // fall through
          case 122: break;
          case 39:
            { return new Symbol(sym.ARROW);
            }
          // fall through
          case 123: break;
          case 40:
            { return new Symbol(sym.DIVIDEEQUAL);
            }
          // fall through
          case 124: break;
          case 41:
            { return new Symbol(sym.LSHIFT);
            }
          // fall through
          case 125: break;
          case 40:
            { return new Symbol(sym.MINUSEQUAL);
            }
          // fall through
          case 126: break;
          case 41:
            { return new Symbol(sym.ARROW);
            }
          // fall through
          case 127: break;
          case 42:
            { /* Ignore single-line comments */
            }
          // fall through
          case 128: break;
          case 43:
            { return new Symbol(sym.DIVIDEEQUAL);
            }
          // fall through
          case 129: break;
          case 44:
            { return new Symbol(sym.LSHIFT);
            }
          // fall through
          case 130: break;
          case 45:
            { return new Symbol(sym.LESSEQUAL);
            }
          // fall through
          case 131: break;
          case 46:
            { return new Symbol(sym.EQUALS);
            }
          // fall through
          case 132: break;
          case 47:
            { return new Symbol(sym.GREATEREQUAL);
            }
          // fall through
          case 133: break;
          case 48:
            { return new Symbol(sym.RSHIFT);
            }
          // fall through
          case 134: break;
          case 49:
            { return new Symbol(sym.XOREQUAL);
            }
          // fall through
          case 135: break;
          case 50:
            { return new Symbol(sym.DO);
            }
          // fall through
          case 136: break;
          case 51:
            { return new Symbol(sym.IF);
            }
          // fall through
          case 137: break;
          case 52:
            { return new Symbol(sym.OREQUAL);
            }
          // fall through
          case 138: break;
          case 53:
            { return new Symbol(sym.OROR);
            }
          // fall through
          case 139: break;
          case 54:
            { return new Symbol(sym.LSHIFTEQUAL);
            }
          // fall through
          case 140: break;
          case 55:
            { return new Symbol(sym.RSHIFTEQUAL);
            }
          // fall through
          case 141: break;
          case 56:
            { return new Symbol(sym.FOR);
            }
          // fall through
          case 142: break;
          case 57:
            { return new Symbol(sym.INT);
            }
          // fall through
          case 143: break;
          case 58:
            { /* Handle comment here */
            }
          // fall through
          case 144: break;
          case 59:
            { return new Symbol(sym.AUTO);
            }
          // fall through
          case 145: break;
          case 60:
            { return new Symbol(sym.CASE);
            }
          // fall through
          case 146: break;
          case 61:
            { return new Symbol(sym.CHAR);
            }
          // fall through
          case 147: break;
          case 62:
            { return new Symbol(sym.ELSE);
            }
          // fall through
          case 148: break;
          case 63:
            { return new Symbol(sym.ENUM);
            }
          // fall through
          case 149: break;
          case 64:
            { return new Symbol(sym.GOTO);
            }
          // fall through
          case 150: break;
          case 65:
            { return new Symbol(sym.LONG);
            }
          // fall through
          case 151: break;
          case 66:
            { return new Symbol(sym.VOID);
            }
          // fall through
          case 152: break;
          case 67:
            { return new Symbol(sym.BREAK);
            }
          // fall through
          case 153: break;
          case 68:
            { return new Symbol(sym.CONST);
            }
          // fall through
          case 154: break;
          case 69:
            { return new Symbol(sym.FLOAT);
            }
          // fall through
          case 155: break;
          case 70:
            { return new Symbol(sym.SHORT);
            }
          // fall through
          case 156: break;
          case 71:
            { return new Symbol(sym.UNION);
            }
          // fall through
          case 157: break;
          case 72:
            { return new Symbol(sym.WHILE);
            }
          // fall through
          case 158: break;
          case 73:
            { return new Symbol(sym.DOUBLE);
            }
          // fall through
          case 159: break;
          case 74:
            { return new Symbol(sym.EXTERN);
            }
          // fall through
          case 160: break;
          case 75:
            { return new Symbol(sym.RETURN);
            }
          // fall through
          case 161: break;
          case 76:
            { return new Symbol(sym.SIGNED);
            }
          // fall through
          case 162: break;
          case 77:
            { return new Symbol(sym.SIZEOF);
            }
          // fall through
          case 163: break;
          case 78:
            { return new Symbol(sym.STATIC);
            }
          // fall through
          case 164: break;
          case 79:
            { return new Symbol(sym.STRUCT);
            }
          // fall through
          case 165: break;
          case 80:
            { return new Symbol(sym.SWITCH);
            }
          // fall through
          case 166: break;
          case 81:
            { return new Symbol(sym.DEFAULT);
            }
          // fall through
          case 167: break;
          case 82:
            { return new Symbol(sym.TYPEDEF);
            }
          // fall through
          case 168: break;
          case 83:
            { return new Symbol(sym.CONTINUE);
            }
          // fall through
          case 169: break;
          case 84:
            { return new Symbol(sym.REGISTER);
            }
          // fall through
          case 170: break;
          case 85:
            { return new Symbol(sym.UNSIGNED);
            }
          // fall through
          case 171: break;
          case 86:
            { return new Symbol(sym.VOLATILE);
            }
          // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
