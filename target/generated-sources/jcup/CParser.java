
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Nov 06 12:07:14 CST 2024
//----------------------------------------------------

import java_cup.runtime.Symbol;
import TokenTable.TokenInfo;

/** CUP v0.10k generated parser.
  * @version Wed Nov 06 12:07:14 CST 2024
  */
public class CParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\007\004\000\002\002\004\000\002\007" +
    "\004\000\002\007\003\000\002\003\003\000\002\003\003" +
    "\000\002\034\006\000\002\034\005\000\002\034\006\000" +
    "\002\034\005\000\002\035\005\000\002\035\004\000\002" +
    "\035\005\000\002\035\004\000\002\005\005\000\002\005" +
    "\003\000\002\005\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\010\005\000\002\011\005\000\002\011\003\000\002\011" +
    "\003\000\002\006\012\000\002\006\012\000\002\012\006" +
    "\000\002\012\004\000\002\012\002\000\002\013\004\000" +
    "\002\013\004\000\002\013\003\000\002\013\003\000\002" +
    "\017\004\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\004" +
    "\000\002\017\004\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\026\005\000\002\030\006\000\002" +
    "\030\007\000\002\031\007\000\002\032\006\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\003\000\002\016\003\000\002\016\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\004\000\002\020\005" +
    "\000\002\027\007\000\002\027\007\000\002\027\006\000" +
    "\002\027\005\000\002\027\003\000\002\022\010\000\002" +
    "\022\012\000\002\022\011\000\002\023\014\000\002\024" +
    "\010\000\002\025\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\020\003\012\067\016\070\020\104\004\105" +
    "\005\110\017\121\007\001\002\000\006\003\ufff0\062\ufff0" +
    "\001\002\000\006\003\uffee\062\uffee\001\002\000\020\003" +
    "\012\067\016\070\020\104\004\105\005\110\017\121\007" +
    "\001\002\000\004\062\304\001\002\000\004\002\303\001" +
    "\002\000\022\002\ufffe\003\012\067\016\070\020\104\004" +
    "\105\005\110\017\121\007\001\002\000\006\003\uffec\062" +
    "\uffec\001\002\000\006\003\023\062\040\001\002\000\054" +
    "\003\ufffc\006\ufffc\007\ufffc\021\ufffc\030\ufffc\062\ufffc\063" +
    "\ufffc\065\ufffc\067\ufffc\070\ufffc\071\ufffc\101\ufffc\103\ufffc" +
    "\104\ufffc\105\ufffc\110\ufffc\115\ufffc\121\ufffc\123\ufffc\125" +
    "\ufffc\126\ufffc\001\002\000\054\003\ufffd\006\ufffd\007\ufffd" +
    "\021\ufffd\030\ufffd\062\ufffd\063\ufffd\065\ufffd\067\ufffd\070" +
    "\ufffd\071\ufffd\101\ufffd\103\ufffd\104\ufffd\105\ufffd\110\ufffd" +
    "\115\ufffd\121\ufffd\123\ufffd\125\ufffd\126\ufffd\001\002\000" +
    "\006\003\uffef\062\uffef\001\002\000\006\003\uffed\062\uffed" +
    "\001\002\000\014\003\012\067\016\104\004\105\005\110" +
    "\017\001\002\000\006\003\023\062\022\001\002\000\062" +
    "\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\021\ufff2\022" +
    "\ufff2\030\ufff2\062\ufff2\063\ufff2\065\ufff2\067\ufff2\070\ufff2" +
    "\071\ufff2\101\ufff2\103\ufff2\104\ufff2\105\ufff2\110\ufff2\115" +
    "\ufff2\121\ufff2\123\ufff2\125\ufff2\126\ufff2\001\002\000\062" +
    "\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\021\ufff1\022" +
    "\ufff1\030\ufff1\062\ufff1\063\ufff1\065\ufff1\067\ufff1\070\ufff1" +
    "\071\ufff1\101\ufff1\103\ufff1\104\ufff1\105\ufff1\110\ufff1\115" +
    "\ufff1\121\ufff1\123\ufff1\125\ufff1\126\ufff1\001\002\000\056" +
    "\003\ufff5\005\037\006\ufff5\007\ufff5\021\ufff5\030\ufff5\062" +
    "\ufff5\063\ufff5\065\ufff5\067\ufff5\070\ufff5\071\ufff5\101\ufff5" +
    "\103\ufff5\104\ufff5\105\ufff5\110\ufff5\115\ufff5\121\ufff5\123" +
    "\ufff5\125\ufff5\126\ufff5\001\002\000\062\003\ufff7\004\026" +
    "\005\027\006\ufff7\007\ufff7\021\ufff7\022\030\030\ufff7\062" +
    "\ufff7\063\ufff7\065\ufff7\067\ufff7\070\ufff7\071\ufff7\101\ufff7" +
    "\103\ufff7\104\ufff7\105\ufff7\110\ufff7\115\ufff7\121\ufff7\123" +
    "\ufff7\125\ufff7\126\ufff7\001\002\000\004\062\036\001\002" +
    "\000\054\003\ufffb\006\ufffb\007\ufffb\021\ufffb\030\ufffb\062" +
    "\ufffb\063\ufffb\065\ufffb\067\ufffb\070\ufffb\071\ufffb\101\ufffb" +
    "\103\ufffb\104\ufffb\105\ufffb\110\ufffb\115\ufffb\121\ufffb\123" +
    "\ufffb\125\ufffb\126\ufffb\001\002\000\006\003\032\063\031" +
    "\001\002\000\060\003\uffe6\004\034\005\uffe6\006\uffe6\007" +
    "\uffe6\021\uffe6\030\uffe6\062\uffe6\063\uffe6\065\uffe6\067\uffe6" +
    "\070\uffe6\071\uffe6\101\uffe6\103\uffe6\104\uffe6\105\uffe6\110" +
    "\uffe6\115\uffe6\121\uffe6\123\uffe6\125\uffe6\126\uffe6\001\002" +
    "\000\056\003\uffe5\005\uffe5\006\uffe5\007\uffe5\021\uffe5\030" +
    "\uffe5\062\uffe5\063\uffe5\065\uffe5\067\uffe5\070\uffe5\071\uffe5" +
    "\101\uffe5\103\uffe5\104\uffe5\105\uffe5\110\uffe5\115\uffe5\121" +
    "\uffe5\123\uffe5\125\uffe5\126\uffe5\001\002\000\056\003\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\021\uffe8\030\uffe8\062\uffe8\063" +
    "\uffe8\065\uffe8\067\uffe8\070\uffe8\071\uffe8\101\uffe8\103\uffe8" +
    "\104\uffe8\105\uffe8\110\uffe8\115\uffe8\121\uffe8\123\uffe8\125" +
    "\uffe8\126\uffe8\001\002\000\006\003\032\063\031\001\002" +
    "\000\056\003\uffe7\005\uffe7\006\uffe7\007\uffe7\021\uffe7\030" +
    "\uffe7\062\uffe7\063\uffe7\065\uffe7\067\uffe7\070\uffe7\071\uffe7" +
    "\101\uffe7\103\uffe7\104\uffe7\105\uffe7\110\uffe7\115\uffe7\121" +
    "\uffe7\123\uffe7\125\uffe7\126\uffe7\001\002\000\062\003\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\021\ufff3\022\ufff3\030" +
    "\ufff3\062\ufff3\063\ufff3\065\ufff3\067\ufff3\070\ufff3\071\ufff3" +
    "\101\ufff3\103\ufff3\104\ufff3\105\ufff3\110\ufff3\115\ufff3\121" +
    "\ufff3\123\ufff3\125\ufff3\126\ufff3\001\002\000\054\003\ufff9" +
    "\006\ufff9\007\ufff9\021\ufff9\030\ufff9\062\ufff9\063\ufff9\065" +
    "\ufff9\067\ufff9\070\ufff9\071\ufff9\101\ufff9\103\ufff9\104\ufff9" +
    "\105\ufff9\110\ufff9\115\ufff9\121\ufff9\123\ufff9\125\ufff9\126" +
    "\ufff9\001\002\000\030\003\ufff2\004\ufff2\005\ufff2\022\ufff2" +
    "\030\045\067\ufff2\070\ufff2\104\ufff2\105\ufff2\110\ufff2\121" +
    "\ufff2\001\002\000\056\003\ufff4\005\044\006\ufff4\007\ufff4" +
    "\021\ufff4\030\ufff4\062\ufff4\063\ufff4\065\ufff4\067\ufff4\070" +
    "\ufff4\071\ufff4\101\ufff4\103\ufff4\104\ufff4\105\ufff4\110\ufff4" +
    "\115\ufff4\121\ufff4\123\ufff4\125\ufff4\126\ufff4\001\002\000" +
    "\062\003\ufff6\004\026\005\043\006\ufff6\007\ufff6\021\ufff6" +
    "\022\030\030\ufff6\062\ufff6\063\ufff6\065\ufff6\067\ufff6\070" +
    "\ufff6\071\ufff6\101\ufff6\103\ufff6\104\ufff6\105\ufff6\110\ufff6" +
    "\115\ufff6\121\ufff6\123\ufff6\125\ufff6\126\ufff6\001\002\000" +
    "\054\003\ufffa\006\ufffa\007\ufffa\021\ufffa\030\ufffa\062\ufffa" +
    "\063\ufffa\065\ufffa\067\ufffa\070\ufffa\071\ufffa\101\ufffa\103" +
    "\ufffa\104\ufffa\105\ufffa\110\ufffa\115\ufffa\121\ufffa\123\ufffa" +
    "\125\ufffa\126\ufffa\001\002\000\054\003\ufff8\006\ufff8\007" +
    "\ufff8\021\ufff8\030\ufff8\062\ufff8\063\ufff8\065\ufff8\067\ufff8" +
    "\070\ufff8\071\ufff8\101\ufff8\103\ufff8\104\ufff8\105\ufff8\110" +
    "\ufff8\115\ufff8\121\ufff8\123\ufff8\125\ufff8\126\ufff8\001\002" +
    "\000\016\003\012\031\uffe0\067\016\104\004\105\005\110" +
    "\017\001\002\000\004\062\277\001\002\000\004\031\050" +
    "\001\002\000\004\034\051\001\002\000\052\003\076\006" +
    "\053\007\060\021\064\030\056\062\072\063\070\065\077" +
    "\067\016\070\020\071\055\101\057\103\071\104\004\105" +
    "\005\110\017\115\102\123\105\125\103\126\061\001\002" +
    "\000\060\003\uffd2\006\uffd2\007\uffd2\021\uffd2\030\uffd2\035" +
    "\uffd2\062\uffd2\063\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2" +
    "\071\uffd2\072\uffd2\101\uffd2\103\uffd2\104\uffd2\105\uffd2\110" +
    "\uffd2\115\uffd2\123\uffd2\125\uffd2\126\uffd2\001\002\000\004" +
    "\062\276\001\002\000\060\003\uffd6\006\uffd6\007\uffd6\021" +
    "\uffd6\030\uffd6\035\uffd6\062\uffd6\063\uffd6\065\uffd6\066\uffd6" +
    "\067\uffd6\070\uffd6\071\uffd6\072\uffd6\101\uffd6\103\uffd6\104" +
    "\uffd6\105\uffd6\110\uffd6\115\uffd6\123\uffd6\125\uffd6\126\uffd6" +
    "\001\002\000\004\005\275\001\002\000\016\006\053\007" +
    "\060\021\064\030\056\062\112\063\070\001\002\000\004" +
    "\030\261\001\002\000\004\062\260\001\002\000\004\030" +
    "\254\001\002\000\060\003\uffd8\006\uffd8\007\uffd8\021\uffd8" +
    "\030\uffd8\035\uffd8\062\uffd8\063\uffd8\065\uffd8\066\uffd8\067" +
    "\uffd8\070\uffd8\071\uffd8\072\uffd8\101\uffd8\103\uffd8\104\uffd8" +
    "\105\uffd8\110\uffd8\115\uffd8\123\uffd8\125\uffd8\126\uffd8\001" +
    "\002\000\060\003\uffda\006\uffda\007\uffda\021\uffda\030\uffda" +
    "\035\uffda\062\uffda\063\uffda\065\uffda\066\uffda\067\uffda\070" +
    "\uffda\071\uffda\072\uffda\101\uffda\103\uffda\104\uffda\105\uffda" +
    "\110\uffda\115\uffda\123\uffda\125\uffda\126\uffda\001\002\000" +
    "\016\006\053\007\060\021\064\030\056\062\112\063\070" +
    "\001\002\000\060\003\uffd9\006\uffd9\007\uffd9\021\uffd9\030" +
    "\uffd9\035\uffd9\062\uffd9\063\uffd9\065\uffd9\066\uffd9\067\uffd9" +
    "\070\uffd9\071\uffd9\072\uffd9\101\uffd9\103\uffd9\104\uffd9\105" +
    "\uffd9\110\uffd9\115\uffd9\123\uffd9\125\uffd9\126\uffd9\001\002" +
    "\000\060\003\uffd3\006\uffd3\007\uffd3\021\uffd3\030\uffd3\035" +
    "\uffd3\062\uffd3\063\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3" +
    "\071\uffd3\072\uffd3\101\uffd3\103\uffd3\104\uffd3\105\uffd3\110" +
    "\uffd3\115\uffd3\123\uffd3\125\uffd3\126\uffd3\001\002\000\052" +
    "\003\076\006\053\007\060\021\064\030\056\062\072\063" +
    "\070\065\077\067\016\070\020\071\055\101\057\103\071" +
    "\104\004\105\005\110\017\115\102\123\105\125\103\126" +
    "\061\001\002\000\052\005\uffba\010\uffba\011\uffba\012\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\031\uffba\040\uffba" +
    "\041\uffba\042\uffba\043\uffba\001\002\000\004\030\241\001" +
    "\002\000\052\005\uffb9\006\115\007\114\010\uffb9\011\uffb9" +
    "\012\uffb9\014\uffb9\015\uffb9\016\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\233\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\001\002\000\004\005\232\001\002\000" +
    "\012\005\uffcb\017\226\020\225\031\uffcb\001\002\000\054" +
    "\003\076\006\053\007\060\021\064\030\056\035\uffdd\062" +
    "\072\063\070\065\077\067\016\070\020\071\055\101\057" +
    "\103\071\104\004\105\005\110\017\115\102\123\105\125" +
    "\103\126\061\001\002\000\012\003\uffec\005\uffc9\035\uffdc" +
    "\062\uffec\001\002\000\004\005\223\001\002\000\004\035" +
    "\222\001\002\000\046\005\uffca\010\175\011\173\012\164" +
    "\014\163\015\167\016\160\022\171\023\165\024\157\025" +
    "\174\026\161\027\166\031\uffca\040\176\041\162\042\170" +
    "\043\172\001\002\000\004\030\132\001\002\000\004\030" +
    "\124\001\002\000\060\003\uffd7\006\uffd7\007\uffd7\021\uffd7" +
    "\030\uffd7\035\uffd7\062\uffd7\063\uffd7\065\uffd7\066\uffd7\067" +
    "\uffd7\070\uffd7\071\uffd7\072\uffd7\101\uffd7\103\uffd7\104\uffd7" +
    "\105\uffd7\110\uffd7\115\uffd7\123\uffd7\125\uffd7\126\uffd7\001" +
    "\002\000\004\030\110\001\002\000\060\003\uffd1\006\uffd1" +
    "\007\uffd1\021\uffd1\030\uffd1\035\uffd1\062\uffd1\063\uffd1\065" +
    "\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\101\uffd1" +
    "\103\uffd1\104\uffd1\105\uffd1\110\uffd1\115\uffd1\123\uffd1\125" +
    "\uffd1\126\uffd1\001\002\000\006\003\023\062\022\001\002" +
    "\000\020\003\113\006\053\007\060\021\064\030\056\062" +
    "\112\063\070\001\002\000\004\031\116\001\002\000\056" +
    "\005\uffb9\006\115\007\114\010\uffb9\011\uffb9\012\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\031\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\001\002\000\006\005\uffc9\031\uffc9" +
    "\001\002\000\052\005\uffbd\010\uffbd\011\uffbd\012\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\031\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\001\002\000\052\005\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\031\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\001\002\000" +
    "\004\034\120\001\002\000\004\005\123\001\002\000\052" +
    "\003\076\006\053\007\060\021\064\030\056\062\072\063" +
    "\070\065\077\067\016\070\020\071\055\101\057\103\071" +
    "\104\004\105\005\110\017\115\102\123\105\125\103\126" +
    "\061\001\002\000\004\035\122\001\002\000\006\005\uffd0" +
    "\075\uffd0\001\002\000\060\003\uffa4\006\uffa4\007\uffa4\021" +
    "\uffa4\030\uffa4\035\uffa4\062\uffa4\063\uffa4\065\uffa4\066\uffa4" +
    "\067\uffa4\070\uffa4\071\uffa4\072\uffa4\101\uffa4\103\uffa4\104" +
    "\uffa4\105\uffa4\110\uffa4\115\uffa4\123\uffa4\125\uffa4\126\uffa4" +
    "\001\002\000\006\031\126\062\125\001\002\000\004\031" +
    "\130\001\002\000\004\005\127\001\002\000\060\003\uffcf" +
    "\006\uffcf\007\uffcf\021\uffcf\030\uffcf\035\uffcf\062\uffcf\063" +
    "\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf" +
    "\101\uffcf\103\uffcf\104\uffcf\105\uffcf\110\uffcf\115\uffcf\123" +
    "\uffcf\125\uffcf\126\uffcf\001\002\000\004\005\131\001\002" +
    "\000\060\003\uffce\006\uffce\007\uffce\021\uffce\030\uffce\035" +
    "\uffce\062\uffce\063\uffce\065\uffce\066\uffce\067\uffce\070\uffce" +
    "\071\uffce\072\uffce\101\uffce\103\uffce\104\uffce\105\uffce\110" +
    "\uffce\115\uffce\123\uffce\125\uffce\126\uffce\001\002\000\004" +
    "\063\133\001\002\000\004\031\134\001\002\000\004\034" +
    "\135\001\002\000\006\003\137\072\136\001\002\000\004" +
    "\036\155\001\002\000\010\035\uffa9\066\uffa9\072\uffa9\001" +
    "\002\000\010\035\142\066\143\072\141\001\002\000\004" +
    "\036\153\001\002\000\004\005\152\001\002\000\006\003" +
    "\145\063\144\001\002\000\004\036\150\001\002\000\004" +
    "\036\146\001\002\000\040\003\113\006\053\007\060\021" +
    "\064\030\056\062\072\063\070\065\077\071\055\101\057" +
    "\103\071\115\102\123\105\125\103\126\061\001\002\000" +
    "\010\035\uffac\066\uffac\072\uffac\001\002\000\040\003\113" +
    "\006\053\007\060\021\064\030\056\062\072\063\070\065" +
    "\077\071\055\101\057\103\071\115\102\123\105\125\103" +
    "\126\061\001\002\000\010\035\uffad\066\uffad\072\uffad\001" +
    "\002\000\060\003\uffa3\006\uffa3\007\uffa3\021\uffa3\030\uffa3" +
    "\035\uffa3\062\uffa3\063\uffa3\065\uffa3\066\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\072\uffa3\101\uffa3\103\uffa3\104\uffa3\105\uffa3" +
    "\110\uffa3\115\uffa3\123\uffa3\125\uffa3\126\uffa3\001\002\000" +
    "\040\003\113\006\053\007\060\021\064\030\056\062\072" +
    "\063\070\065\077\071\055\101\057\103\071\115\102\123" +
    "\105\125\103\126\061\001\002\000\010\035\uffab\066\uffab" +
    "\072\uffab\001\002\000\040\003\113\006\053\007\060\021" +
    "\064\030\056\062\072\063\070\065\077\071\055\101\057" +
    "\103\071\115\102\123\105\125\103\126\061\001\002\000" +
    "\010\035\uffaa\066\uffaa\072\uffaa\001\002\000\014\006\053" +
    "\007\060\030\200\062\112\063\070\001\002\000\014\006" +
    "\053\007\060\030\200\062\112\063\070\001\002\000\014" +
    "\006\053\007\060\030\200\062\112\063\070\001\002\000" +
    "\014\006\053\007\060\030\200\062\112\063\070\001\002" +
    "\000\014\006\053\007\060\030\200\062\112\063\070\001" +
    "\002\000\014\006\053\007\060\030\200\062\112\063\070" +
    "\001\002\000\014\006\053\007\060\030\200\062\112\063" +
    "\070\001\002\000\014\006\053\007\060\030\200\062\112" +
    "\063\070\001\002\000\014\006\053\007\060\030\200\062" +
    "\112\063\070\001\002\000\014\006\053\007\060\030\200" +
    "\062\112\063\070\001\002\000\014\006\053\007\060\030" +
    "\200\062\112\063\070\001\002\000\014\006\053\007\060" +
    "\030\200\062\112\063\070\001\002\000\014\006\053\007" +
    "\060\030\200\062\112\063\070\001\002\000\014\006\053" +
    "\007\060\030\200\062\112\063\070\001\002\000\014\006" +
    "\053\007\060\030\200\062\112\063\070\001\002\000\014" +
    "\006\053\007\060\030\200\062\112\063\070\001\002\000" +
    "\052\005\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\022\uffc2\023\165\024\157\025" +
    "\174\026\161\027\166\031\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\001\002\000\014\006\053\007\060\030\200\062" +
    "\112\063\070\001\002\000\030\022\171\023\165\024\157" +
    "\025\174\026\161\027\166\031\202\040\176\041\162\042" +
    "\170\043\172\001\002\000\052\005\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\031\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\001\002\000\036\005" +
    "\uffb7\017\uffb7\020\uffb7\022\171\023\165\024\157\025\174" +
    "\026\161\027\166\031\uffb7\040\176\041\162\042\170\043" +
    "\172\001\002\000\052\005\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\001\002\000\036\005\uffb5\017" +
    "\uffb5\020\uffb5\022\171\023\165\024\157\025\174\026\161" +
    "\027\166\031\uffb5\040\176\041\162\042\170\043\172\001" +
    "\002\000\052\005\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\022\uffbf\023\165\024" +
    "\157\025\174\026\161\027\166\031\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\001\002\000\052\005\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\022\uffc3\023\165\024\157\025\174\026\161\027\166\031" +
    "\uffc3\040\176\041\162\042\170\043\172\001\002\000\052" +
    "\005\uffc0\010\uffc0\011\uffc0\012\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\022\uffc0\023\165\024\157\025\174" +
    "\026\161\027\166\031\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\001\002\000\036\005\uffb2\017\uffb2\020\uffb2\022\171" +
    "\023\165\024\157\025\174\026\161\027\166\031\uffb2\040" +
    "\176\041\162\042\170\043\172\001\002\000\052\005\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\031\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\001" +
    "\002\000\052\005\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\174\026\161\027\166\031\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\001\002\000\036\005\uffb4\017\uffb4\020" +
    "\uffb4\022\171\023\165\024\157\025\174\026\161\027\166" +
    "\031\uffb4\040\176\041\162\042\170\043\172\001\002\000" +
    "\036\005\uffb3\017\uffb3\020\uffb3\022\171\023\165\024\157" +
    "\025\174\026\161\027\166\031\uffb3\040\176\041\162\042" +
    "\170\043\172\001\002\000\052\005\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\022" +
    "\uffc1\023\165\024\157\025\174\026\161\027\166\031\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\001\002\000\052\005" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\031\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\001\002\000\036\005\uffb6\017\uffb6\020\uffb6\022\171\023" +
    "\165\024\157\025\174\026\161\027\166\031\uffb6\040\176" +
    "\041\162\042\170\043\172\001\002\000\052\005\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\022\uffc7\023\uffc7\024\uffc7\025\174\026\161\027" +
    "\166\031\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\001\002" +
    "\000\022\002\uffe4\003\uffe4\067\uffe4\070\uffe4\104\uffe4\105" +
    "\uffe4\110\uffe4\121\uffe4\001\002\000\060\003\uffd5\006\uffd5" +
    "\007\uffd5\021\uffd5\030\uffd5\035\uffd5\062\uffd5\063\uffd5\065" +
    "\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\101\uffd5" +
    "\103\uffd5\104\uffd5\105\uffd5\110\uffd5\115\uffd5\123\uffd5\125" +
    "\uffd5\126\uffd5\001\002\000\004\035\uffde\001\002\000\016" +
    "\006\053\007\060\021\064\030\056\062\112\063\070\001" +
    "\002\000\016\006\053\007\060\021\064\030\056\062\112" +
    "\063\070\001\002\000\042\010\175\011\173\012\164\014" +
    "\163\015\167\016\160\022\171\023\165\024\157\025\174" +
    "\026\161\027\166\040\176\041\162\042\170\043\172\001" +
    "\002\000\012\005\uffb1\017\uffb1\020\225\031\uffb1\001\002" +
    "\000\012\005\uffb0\017\uffb0\020\uffb0\031\uffb0\001\002\000" +
    "\060\003\uffdb\006\uffdb\007\uffdb\021\uffdb\030\uffdb\035\uffdb" +
    "\062\uffdb\063\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071" +
    "\uffdb\072\uffdb\101\uffdb\103\uffdb\104\uffdb\105\uffdb\110\uffdb" +
    "\115\uffdb\123\uffdb\125\uffdb\126\uffdb\001\002\000\010\062" +
    "\234\063\235\067\237\001\002\000\004\031\uffeb\001\002" +
    "\000\004\031\uffea\001\002\000\004\031\240\001\002\000" +
    "\004\031\uffe9\001\002\000\060\003\uffcc\006\uffcc\007\uffcc" +
    "\021\uffcc\030\uffcc\035\uffcc\062\uffcc\063\uffcc\065\uffcc\066" +
    "\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\101\uffcc\103\uffcc" +
    "\104\uffcc\105\uffcc\110\uffcc\115\uffcc\123\uffcc\125\uffcc\126" +
    "\uffcc\001\002\000\020\003\113\006\053\007\060\021\064" +
    "\030\056\062\112\063\070\001\002\000\004\031\243\001" +
    "\002\000\004\034\120\001\002\000\006\005\245\075\246" +
    "\001\002\000\060\003\uffa8\006\uffa8\007\uffa8\021\uffa8\030" +
    "\uffa8\035\uffa8\062\uffa8\063\uffa8\065\uffa8\066\uffa8\067\uffa8" +
    "\070\uffa8\071\uffa8\072\uffa8\101\uffa8\103\uffa8\104\uffa8\105" +
    "\uffa8\110\uffa8\115\uffa8\123\uffa8\125\uffa8\126\uffa8\001\002" +
    "\000\006\003\250\034\120\001\002\000\004\005\251\001" +
    "\002\000\060\003\uffa6\006\uffa6\007\uffa6\021\uffa6\030\uffa6" +
    "\035\uffa6\062\uffa6\063\uffa6\065\uffa6\066\uffa6\067\uffa6\070" +
    "\uffa6\071\uffa6\072\uffa6\101\uffa6\103\uffa6\104\uffa6\105\uffa6" +
    "\110\uffa6\115\uffa6\123\uffa6\125\uffa6\126\uffa6\001\002\000" +
    "\060\003\uffa7\006\uffa7\007\uffa7\021\uffa7\030\uffa7\035\uffa7" +
    "\062\uffa7\063\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071" +
    "\uffa7\072\uffa7\101\uffa7\103\uffa7\104\uffa7\105\uffa7\110\uffa7" +
    "\115\uffa7\123\uffa7\125\uffa7\126\uffa7\001\002\000\004\035" +
    "\uffdf\001\002\000\012\005\uffaf\017\uffaf\020\uffaf\031\uffaf" +
    "\001\002\000\020\003\113\006\053\007\060\021\064\030" +
    "\056\062\112\063\070\001\002\000\004\031\256\001\002" +
    "\000\004\005\257\001\002\000\060\003\uffcd\006\uffcd\007" +
    "\uffcd\021\uffcd\030\uffcd\035\uffcd\062\uffcd\063\uffcd\065\uffcd" +
    "\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\101\uffcd\103" +
    "\uffcd\104\uffcd\105\uffcd\110\uffcd\115\uffcd\123\uffcd\125\uffcd" +
    "\126\uffcd\001\002\000\052\005\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\031\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\001\002\000\020\003\113" +
    "\006\053\007\060\021\064\030\056\062\112\063\070\001" +
    "\002\000\004\005\263\001\002\000\020\003\113\006\053" +
    "\007\060\021\064\030\056\062\112\063\070\001\002\000" +
    "\004\005\265\001\002\000\020\003\113\006\053\007\060" +
    "\021\064\030\056\062\112\063\070\001\002\000\004\031" +
    "\267\001\002\000\004\034\120\001\002\000\004\005\271" +
    "\001\002\000\060\003\uffa5\006\uffa5\007\uffa5\021\uffa5\030" +
    "\uffa5\035\uffa5\062\uffa5\063\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\101\uffa5\103\uffa5\104\uffa5\105" +
    "\uffa5\110\uffa5\115\uffa5\123\uffa5\125\uffa5\126\uffa5\001\002" +
    "\000\044\010\175\011\173\012\164\014\163\015\167\016" +
    "\160\022\171\023\165\024\157\025\174\026\161\027\166" +
    "\031\202\040\176\041\162\042\170\043\172\001\002\000" +
    "\010\017\226\020\225\031\274\001\002\000\012\005\uffae" +
    "\017\uffae\020\uffae\031\uffae\001\002\000\060\003\uffd4\006" +
    "\uffd4\007\uffd4\021\uffd4\030\uffd4\035\uffd4\062\uffd4\063\uffd4" +
    "\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\101" +
    "\uffd4\103\uffd4\104\uffd4\105\uffd4\110\uffd4\115\uffd4\123\uffd4" +
    "\125\uffd4\126\uffd4\001\002\000\052\005\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\031" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\001\002\000\006" +
    "\004\300\031\uffe1\001\002\000\016\003\012\031\uffe0\067" +
    "\016\104\004\105\005\110\017\001\002\000\004\031\uffe2" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\000\001" +
    "\002\000\004\030\305\001\002\000\016\003\012\031\uffe0" +
    "\067\016\104\004\105\005\110\017\001\002\000\004\031" +
    "\307\001\002\000\004\034\310\001\002\000\052\003\076" +
    "\006\053\007\060\021\064\030\056\062\072\063\070\065" +
    "\077\067\016\070\020\071\055\101\057\103\071\104\004" +
    "\105\005\110\017\115\102\123\105\125\103\126\061\001" +
    "\002\000\004\035\312\001\002\000\022\002\uffe3\003\uffe3" +
    "\067\uffe3\070\uffe3\104\uffe3\105\uffe3\110\uffe3\121\uffe3\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\016\003\005\004\012\006\010\007\007\034" +
    "\014\035\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\005\004\012\006\010\007\312\034\014\035" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\005\004\012\006\010\007\301\034\014\035\013\001" +
    "\001\000\002\001\001\000\006\005\041\010\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\020\001\001\000\006\005\024" +
    "\010\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\045\012\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\066\004\106\013\077\015\062\016\100\017" +
    "\074\020\073\021\072\022\064\023\061\024\103\025\053" +
    "\030\051\031\065\032\105\034\014\035\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\271\020\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\226\020\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\003\066\004\106" +
    "\013\251\015\062\016\100\017\074\020\073\021\072\022" +
    "\064\023\061\024\103\025\053\030\051\031\065\032\105" +
    "\034\014\035\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\066\004\106\013\223\015\062\016\100\017" +
    "\074\020\073\021\072\022\064\023\061\024\103\025\053" +
    "\030\051\031\065\032\105\034\014\035\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\041" +
    "\010\040\001\001\000\010\016\100\020\073\021\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\116\001" +
    "\001\000\002\001\001\000\044\003\066\004\106\013\120" +
    "\015\062\016\100\017\074\020\073\021\072\022\064\023" +
    "\061\024\103\025\053\030\051\031\065\032\105\034\014" +
    "\035\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\015\062\016\100\017\146\020\073\021\072\022\064" +
    "\023\061\024\103\025\053\030\051\031\065\032\105\001" +
    "\001\000\002\001\001\000\032\015\062\016\100\017\150" +
    "\020\073\021\072\022\064\023\061\024\103\025\053\030" +
    "\051\031\065\032\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\015\062\016\100\017\153\020\073\021" +
    "\072\022\064\023\061\024\103\025\053\030\051\031\065" +
    "\032\105\001\001\000\002\001\001\000\032\015\062\016" +
    "\100\017\155\020\073\021\072\022\064\023\061\024\103" +
    "\025\053\030\051\031\065\032\105\001\001\000\002\001" +
    "\001\000\004\016\220\001\001\000\004\016\217\001\001" +
    "\000\004\016\216\001\001\000\004\016\215\001\001\000" +
    "\004\016\214\001\001\000\004\016\213\001\001\000\004" +
    "\016\212\001\001\000\004\016\211\001\001\000\004\016" +
    "\210\001\001\000\004\016\207\001\001\000\004\016\206" +
    "\001\001\000\004\016\205\001\001\000\004\016\204\001" +
    "\001\000\004\016\203\001\001\000\004\016\202\001\001" +
    "\000\004\016\176\001\001\000\002\001\001\000\004\016" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\226\020\230\001\001" +
    "\000\006\016\226\020\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\100\020\073\021\241\001\001\000\002\001\001\000" +
    "\004\026\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\100\020\073\021\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\100\020\073\021\261\001\001\000\002\001" +
    "\001\000\010\016\100\020\073\021\263\001\001\000\002" +
    "\001\001\000\010\016\100\020\073\021\265\001\001\000" +
    "\002\001\001\000\004\026\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\045\012\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\045\012\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\066\004\106\013\310\015\062" +
    "\016\100\017\074\020\073\021\072\022\064\023\061\024" +
    "\103\025\053\030\051\031\065\032\105\034\014\035\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol sym = (Symbol) info;
            TokenInfo tokenInf = (TokenInfo) sym.value;
            if(!message.equals("Syntax error")){
                System.err.printf("Syntax Error: %s near token %s at line %d, column %d%n",
                        message, tokenInf.value, tokenInf.line, tokenInf.column);
            }
            else{
                System.err.printf("Syntax Error: related with token %s at line %d, column %d%n",
                        tokenInf.value, tokenInf.line, tokenInf.column);
            }

        } else {
            System.err.println("Syntax Error: " + message);
        }
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error: Unable to continue parsing.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // switch_statement ::= SWITCH LPAREN NUM RPAREN LBRACE case_blocks RBRACE SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(19/*switch_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // while_statement ::= WHILE LPAREN expression RPAREN statement_block SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(18/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // for_statement ::= FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statement_block SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(17/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // if_statement ::= IF LPAREN expression RPAREN statement_block ELSE error 
            {
              Object RESULT = null;
		 parser.report_error("Error: Uso duplicado de 'else' en 'if'.", parser.scan()); 
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*if_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // if_statement ::= IF LPAREN expression RPAREN statement_block ELSE statement_block SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(16/*if_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if_statement ::= IF LPAREN expression RPAREN statement_block SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(16/*if_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // case_blocks ::= error 
            {
              Object RESULT = null;
		parser.report_error("Error en 'case' o 'default' en 'switch'.", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(21/*case_blocks*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // case_blocks ::= DEFAULT COLON statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(21/*case_blocks*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // case_blocks ::= case_blocks DEFAULT COLON statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(21/*case_blocks*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // case_blocks ::= case_blocks CASE error COLON statement 
            {
              Object RESULT = null;
		parser.report_error("Error: 'case' debe ser una constante.", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(21/*case_blocks*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // case_blocks ::= case_blocks CASE NUM COLON statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(21/*case_blocks*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // booleanExpression ::= LPAREN booleanExpression RPAREN 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // booleanExpression ::= NOT booleanExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // booleanExpression ::= booleanExpression ANDAND booleanExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // booleanExpression ::= booleanExpression OROR booleanExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // booleanExpression ::= arithmeticExpression LESS arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // booleanExpression ::= arithmeticExpression LESSEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // booleanExpression ::= arithmeticExpression GREATER arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // booleanExpression ::= arithmeticExpression GREATEREQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // booleanExpression ::= arithmeticExpression NOTEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // booleanExpression ::= arithmeticExpression EQUALS arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arithmeticExpression ::= LPAREN arithmeticExpression RPAREN 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arithmeticExpression ::= ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arithmeticExpression ::= NUM 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arithmeticExpression ::= DECREMENT ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arithmeticExpression ::= INCREMENT ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arithmeticExpression ::= ID DECREMENT 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arithmeticExpression ::= ID INCREMENT 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arithmeticExpression ::= arithmeticExpression DIVIDEEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arithmeticExpression ::= arithmeticExpression TIMESEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arithmeticExpression ::= arithmeticExpression MINUSEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arithmeticExpression ::= arithmeticExpression PLUSEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arithmeticExpression ::= arithmeticExpression ASSIGN arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arithmeticExpression ::= arithmeticExpression MODULO arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arithmeticExpression ::= arithmeticExpression DIVIDE arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arithmeticExpression ::= arithmeticExpression TIMES arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arithmeticExpression ::= arithmeticExpression MINUS arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arithmeticExpression ::= arithmeticExpression PLUS arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= error 
            {
              Object RESULT = null;
		parser.report_error("Invalid expression", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= booleanExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(15/*expression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function_call ::= ID LPAREN params RPAREN 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(24/*function_call*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // write_statement ::= WRITE LPAREN expression RPAREN SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(23/*write_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // read_statement ::= READ LPAREN ID RPAREN SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(22/*read_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // read_statement ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(22/*read_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement_block ::= LBRACE funcImpl RBRACE 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(20/*statement_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= function_call 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= read_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= write_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= CONTINUE SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= BREAK SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= switch_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= while_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= for_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= if_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= funcBody 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= expression SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcImpl ::= error 
            {
              Object RESULT = null;
		parser.report_error("Function implementation error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(9/*funcImpl*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcImpl ::= statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(9/*funcImpl*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcImpl ::= statement funcImpl 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(9/*funcImpl*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcImpl ::= varDeclaration funcImpl 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(9/*funcImpl*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramChain ::= 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(8/*paramChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramChain ::= type ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(8/*paramChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramChain ::= type ID COMMA paramChain 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(8/*paramChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcDeclaration ::= VOID ID LPAREN paramChain RPAREN LBRACE funcImpl RBRACE 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(4/*funcDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcDeclaration ::= type ID LPAREN paramChain RPAREN LBRACE funcImpl RBRACE 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(4/*funcDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignationChain ::= error 
            {
              Object RESULT = null;
		parser.report_error("Assignation error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(7/*asignationChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignationChain ::= NUM 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(7/*asignationChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignationChain ::= NUM COMMA asignationChain 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(7/*asignationChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // varAsignation ::= idChain ASSIGN asignationChain 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(6/*varAsignation*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // params ::= CHAR 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(25/*params*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // params ::= NUM 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(25/*params*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // params ::= ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(25/*params*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= error 
            {
              Object RESULT = null;
		parser.report_error("Invalid type", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= SHORT 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= LONG 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= CHAR 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // idChain ::= error 
            {
              Object RESULT = null;
		
              CUP$CParser$result = new java_cup.runtime.Symbol(3/*idChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // idChain ::= ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(3/*idChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // idChain ::= idChain COMMA ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(3/*idChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varDeclarationError ::= type varAsignation 
            {
              Object RESULT = null;
		 parser.report_error("Error: Falta ';' al final de la declaracion.", parser.scan()); 
              CUP$CParser$result = new java_cup.runtime.Symbol(27/*varDeclarationError*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDeclarationError ::= CONST type varAsignation 
            {
              Object RESULT = null;
		 parser.report_error("Error: Falta ';' al final de la declaracion.", parser.scan()); 
              CUP$CParser$result = new java_cup.runtime.Symbol(27/*varDeclarationError*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDeclarationError ::= type idChain 
            {
              Object RESULT = null;
		 parser.report_error("Error: Falta ';' al final de la declaracion.", parser.scan()); 
              CUP$CParser$result = new java_cup.runtime.Symbol(27/*varDeclarationError*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDeclarationError ::= CONST type idChain 
            {
              Object RESULT = null;
		 parser.report_error("Error: Falta ; al final de la declaracion.", parser.scan()); 
              CUP$CParser$result = new java_cup.runtime.Symbol(27/*varDeclarationError*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // validVarDeclaration ::= type varAsignation SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(26/*validVarDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // validVarDeclaration ::= CONST type varAsignation SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(26/*validVarDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // validVarDeclaration ::= type idChain SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(26/*validVarDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // validVarDeclaration ::= CONST type idChain SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(26/*validVarDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varDeclaration ::= varDeclarationError 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(1/*varDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // varDeclaration ::= validVarDeclaration 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(1/*varDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globalProg ::= funcDeclaration 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(5/*globalProg*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globalProg ::= funcDeclaration globalProg 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(5/*globalProg*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= globalProg EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // globalProg ::= varDeclaration globalProg 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(5/*globalProg*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

