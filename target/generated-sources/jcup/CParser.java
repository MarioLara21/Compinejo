
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Nov 07 02:10:15 UTC 2024
//----------------------------------------------------

import java_cup.runtime.Symbol;
import TokenTable.TokenInfo;

/** CUP v0.10k generated parser.
  * @version Thu Nov 07 02:10:15 UTC 2024
  */
public class CParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\007\004\000\002\002\004\000\002\007" +
    "\004\000\002\007\003\000\002\003\003\000\002\003\003" +
    "\000\002\035\006\000\002\035\005\000\002\035\006\000" +
    "\002\035\005\000\002\005\005\000\002\005\003\000\002" +
    "\005\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\010\005\000" +
    "\002\011\005\000\002\011\003\000\002\011\003\000\002" +
    "\006\012\000\002\006\012\000\002\012\006\000\002\012" +
    "\004\000\002\012\002\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\016\004\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\004\000\002\016\004\000\002\025\005" +
    "\000\002\031\006\000\002\031\007\000\002\031\007\000" +
    "\002\032\007\000\002\032\006\000\002\033\006\000\002" +
    "\020\003\000\002\020\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\004\000\002\017" +
    "\005\000\002\021\007\000\002\021\010\000\002\021\011" +
    "\000\002\022\013\000\002\022\013\000\002\022\013\000" +
    "\002\022\013\000\002\022\012\000\002\022\007\000\002" +
    "\022\004\000\002\023\007\000\002\023\006\000\002\023" +
    "\004\000\002\024\011\000\002\024\011\000\002\026\004" +
    "\000\002\026\003\000\002\026\003\000\002\027\006\000" +
    "\002\027\006\000\002\027\004\000\002\030\005\000\002" +
    "\030\004\000\002\030\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\020\003\013\067\016\070\020\104\004\105" +
    "\005\110\017\121\007\001\002\000\006\003\ufff4\062\ufff4" +
    "\001\002\000\006\003\ufff2\062\ufff2\001\002\000\020\003" +
    "\013\067\016\070\020\104\004\105\005\110\017\121\007" +
    "\001\002\000\004\062\337\001\002\000\004\002\336\001" +
    "\002\000\022\002\ufffe\003\013\067\016\070\020\104\004" +
    "\105\005\110\017\121\007\001\002\000\006\003\023\062" +
    "\040\001\002\000\006\003\ufff0\062\ufff0\001\002\000\054" +
    "\003\ufffc\006\ufffc\007\ufffc\021\ufffc\030\ufffc\062\ufffc\063" +
    "\ufffc\065\ufffc\067\ufffc\070\ufffc\071\ufffc\101\ufffc\103\ufffc" +
    "\104\ufffc\105\ufffc\110\ufffc\115\ufffc\121\ufffc\123\ufffc\125" +
    "\ufffc\126\ufffc\001\002\000\054\003\ufffd\006\ufffd\007\ufffd" +
    "\021\ufffd\030\ufffd\062\ufffd\063\ufffd\065\ufffd\067\ufffd\070" +
    "\ufffd\071\ufffd\101\ufffd\103\ufffd\104\ufffd\105\ufffd\110\ufffd" +
    "\115\ufffd\121\ufffd\123\ufffd\125\ufffd\126\ufffd\001\002\000" +
    "\006\003\ufff3\062\ufff3\001\002\000\006\003\ufff1\062\ufff1" +
    "\001\002\000\014\003\013\067\016\104\004\105\005\110" +
    "\017\001\002\000\006\003\023\062\022\001\002\000\010" +
    "\004\ufff6\005\ufff6\022\ufff6\001\002\000\010\004\ufff5\005" +
    "\ufff5\022\ufff5\001\002\000\004\005\037\001\002\000\010" +
    "\004\026\005\027\022\030\001\002\000\004\062\036\001" +
    "\002\000\054\003\ufffb\006\ufffb\007\ufffb\021\ufffb\030\ufffb" +
    "\062\ufffb\063\ufffb\065\ufffb\067\ufffb\070\ufffb\071\ufffb\101" +
    "\ufffb\103\ufffb\104\ufffb\105\ufffb\110\ufffb\115\ufffb\121\ufffb" +
    "\123\ufffb\125\ufffb\126\ufffb\001\002\000\006\003\032\063" +
    "\031\001\002\000\006\004\034\005\uffea\001\002\000\004" +
    "\005\uffe9\001\002\000\004\005\uffec\001\002\000\006\003" +
    "\032\063\031\001\002\000\004\005\uffeb\001\002\000\010" +
    "\004\ufff7\005\ufff7\022\ufff7\001\002\000\054\003\ufff9\006" +
    "\ufff9\007\ufff9\021\ufff9\030\ufff9\062\ufff9\063\ufff9\065\ufff9" +
    "\067\ufff9\070\ufff9\071\ufff9\101\ufff9\103\ufff9\104\ufff9\105" +
    "\ufff9\110\ufff9\115\ufff9\121\ufff9\123\ufff9\125\ufff9\126\ufff9" +
    "\001\002\000\012\004\ufff6\005\ufff6\022\ufff6\030\045\001" +
    "\002\000\004\005\044\001\002\000\010\004\026\005\043" +
    "\022\030\001\002\000\054\003\ufffa\006\ufffa\007\ufffa\021" +
    "\ufffa\030\ufffa\062\ufffa\063\ufffa\065\ufffa\067\ufffa\070\ufffa" +
    "\071\ufffa\101\ufffa\103\ufffa\104\ufffa\105\ufffa\110\ufffa\115" +
    "\ufffa\121\ufffa\123\ufffa\125\ufffa\126\ufffa\001\002\000\054" +
    "\003\ufff8\006\ufff8\007\ufff8\021\ufff8\030\ufff8\062\ufff8\063" +
    "\ufff8\065\ufff8\067\ufff8\070\ufff8\071\ufff8\101\ufff8\103\ufff8" +
    "\104\ufff8\105\ufff8\110\ufff8\115\ufff8\121\ufff8\123\ufff8\125" +
    "\ufff8\126\ufff8\001\002\000\016\003\013\031\uffe4\067\016" +
    "\104\004\105\005\110\017\001\002\000\004\062\332\001" +
    "\002\000\004\031\050\001\002\000\004\034\051\001\002" +
    "\000\052\003\075\006\053\007\060\021\063\030\056\062" +
    "\071\063\067\065\076\067\016\070\020\071\055\101\057" +
    "\103\070\104\004\105\005\110\017\115\101\123\104\125" +
    "\102\126\061\001\002\000\054\003\uffd9\006\uffd9\007\uffd9" +
    "\021\uffd9\030\uffd9\035\uffd9\062\uffd9\063\uffd9\065\uffd9\067" +
    "\uffd9\070\uffd9\071\uffd9\101\uffd9\103\uffd9\104\uffd9\105\uffd9" +
    "\110\uffd9\115\uffd9\123\uffd9\125\uffd9\126\uffd9\001\002\000" +
    "\004\062\331\001\002\000\054\003\uffdb\006\uffdb\007\uffdb" +
    "\021\uffdb\030\uffdb\035\uffdb\062\uffdb\063\uffdb\065\uffdb\067" +
    "\uffdb\070\uffdb\071\uffdb\101\uffdb\103\uffdb\104\uffdb\105\uffdb" +
    "\110\uffdb\115\uffdb\123\uffdb\125\uffdb\126\uffdb\001\002\000" +
    "\004\005\330\001\002\000\016\006\053\007\060\021\063" +
    "\030\056\062\071\063\067\001\002\000\006\003\272\030" +
    "\273\001\002\000\004\062\271\001\002\000\004\030\263" +
    "\001\002\000\054\003\uffdd\006\uffdd\007\uffdd\021\uffdd\030" +
    "\uffdd\035\uffdd\062\uffdd\063\uffdd\065\uffdd\067\uffdd\070\uffdd" +
    "\071\uffdd\101\uffdd\103\uffdd\104\uffdd\105\uffdd\110\uffdd\115" +
    "\uffdd\123\uffdd\125\uffdd\126\uffdd\001\002\000\016\006\053" +
    "\007\060\021\063\030\056\062\071\063\067\001\002\000" +
    "\054\003\uffde\006\uffde\007\uffde\021\uffde\030\uffde\035\uffde" +
    "\062\uffde\063\uffde\065\uffde\067\uffde\070\uffde\071\uffde\101" +
    "\uffde\103\uffde\104\uffde\105\uffde\110\uffde\115\uffde\123\uffde" +
    "\125\uffde\126\uffde\001\002\000\054\003\uffda\006\uffda\007" +
    "\uffda\021\uffda\030\uffda\035\uffda\062\uffda\063\uffda\065\uffda" +
    "\067\uffda\070\uffda\071\uffda\101\uffda\103\uffda\104\uffda\105" +
    "\uffda\110\uffda\115\uffda\123\uffda\125\uffda\126\uffda\001\002" +
    "\000\052\003\075\006\053\007\060\021\063\030\056\062" +
    "\071\063\067\065\076\067\016\070\020\071\055\101\057" +
    "\103\070\104\004\105\005\110\017\115\101\123\104\125" +
    "\102\126\061\001\002\000\054\003\uffbe\005\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\031\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\001\002\000" +
    "\004\030\252\001\002\000\062\003\uffbd\005\uffbd\006\243" +
    "\007\242\010\uffbd\011\uffbd\012\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\244\031\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\001\002\000\004\005\241\001\002\000\014" +
    "\003\uffce\005\uffce\017\235\020\234\031\uffce\001\002\000" +
    "\054\003\075\006\053\007\060\021\063\030\056\035\uffe1" +
    "\062\071\063\067\065\076\067\016\070\020\071\055\101" +
    "\057\103\070\104\004\105\005\110\017\115\101\123\104" +
    "\125\102\126\061\001\002\000\010\003\ufff0\035\uffe0\062" +
    "\ufff0\001\002\000\004\005\232\001\002\000\004\035\231" +
    "\001\002\000\050\003\uffcd\005\uffcd\010\222\011\221\012" +
    "\217\014\216\015\220\016\215\022\144\023\143\024\140" +
    "\025\150\026\141\027\146\031\uffcd\040\152\041\142\042" +
    "\145\043\151\001\002\000\004\030\133\001\002\000\004" +
    "\030\122\001\002\000\054\003\uffdc\006\uffdc\007\uffdc\021" +
    "\uffdc\030\uffdc\035\uffdc\062\uffdc\063\uffdc\065\uffdc\067\uffdc" +
    "\070\uffdc\071\uffdc\101\uffdc\103\uffdc\104\uffdc\105\uffdc\110" +
    "\uffdc\115\uffdc\123\uffdc\125\uffdc\126\uffdc\001\002\000\006" +
    "\003\107\030\110\001\002\000\116\003\uffd8\005\uffbc\006" +
    "\uffd8\007\uffd8\010\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\021\uffd8\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffd8\035\uffd8\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\062\uffd8\063\uffd8\065\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\101\uffd8\103\uffd8\104\uffd8\105\uffd8\110\uffd8\115\uffd8" +
    "\123\uffd8\125\uffd8\126\uffd8\001\002\000\006\003\023\062" +
    "\022\001\002\000\054\003\uffa4\006\uffa4\007\uffa4\021\uffa4" +
    "\030\uffa4\035\uffa4\062\uffa4\063\uffa4\065\uffa4\067\uffa4\070" +
    "\uffa4\071\uffa4\101\uffa4\103\uffa4\104\uffa4\105\uffa4\110\uffa4" +
    "\115\uffa4\123\uffa4\125\uffa4\126\uffa4\001\002\000\020\006" +
    "\053\007\060\021\063\030\056\031\113\062\071\063\067" +
    "\001\002\000\054\003\uffbc\005\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\031\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\001\002\000\004\031\120" +
    "\001\002\000\004\034\115\001\002\000\054\003\uffa5\006" +
    "\uffa5\007\uffa5\021\uffa5\030\uffa5\035\uffa5\062\uffa5\063\uffa5" +
    "\065\uffa5\067\uffa5\070\uffa5\071\uffa5\101\uffa5\103\uffa5\104" +
    "\uffa5\105\uffa5\110\uffa5\115\uffa5\123\uffa5\125\uffa5\126\uffa5" +
    "\001\002\000\052\003\075\006\053\007\060\021\063\030" +
    "\056\062\071\063\067\065\076\067\016\070\020\071\055" +
    "\101\057\103\070\104\004\105\005\110\017\115\101\123" +
    "\104\125\102\126\061\001\002\000\004\035\117\001\002" +
    "\000\062\003\uffd5\006\uffd5\007\uffd5\021\uffd5\030\uffd5\035" +
    "\uffd5\062\uffd5\063\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\075\uffd5\101\uffd5\103\uffd5\104\uffd5\105" +
    "\uffd5\110\uffd5\115\uffd5\123\uffd5\125\uffd5\126\uffd5\001\002" +
    "\000\004\034\115\001\002\000\054\003\uffa6\006\uffa6\007" +
    "\uffa6\021\uffa6\030\uffa6\035\uffa6\062\uffa6\063\uffa6\065\uffa6" +
    "\067\uffa6\070\uffa6\071\uffa6\101\uffa6\103\uffa6\104\uffa6\105" +
    "\uffa6\110\uffa6\115\uffa6\123\uffa6\125\uffa6\126\uffa6\001\002" +
    "\000\010\003\125\031\124\062\123\001\002\000\004\031" +
    "\131\001\002\000\004\005\130\001\002\000\004\031\126" +
    "\001\002\000\004\005\127\001\002\000\054\003\uffd2\006" +
    "\uffd2\007\uffd2\021\uffd2\030\uffd2\035\uffd2\062\uffd2\063\uffd2" +
    "\065\uffd2\067\uffd2\070\uffd2\071\uffd2\101\uffd2\103\uffd2\104" +
    "\uffd2\105\uffd2\110\uffd2\115\uffd2\123\uffd2\125\uffd2\126\uffd2" +
    "\001\002\000\054\003\uffd4\006\uffd4\007\uffd4\021\uffd4\030" +
    "\uffd4\035\uffd4\062\uffd4\063\uffd4\065\uffd4\067\uffd4\070\uffd4" +
    "\071\uffd4\101\uffd4\103\uffd4\104\uffd4\105\uffd4\110\uffd4\115" +
    "\uffd4\123\uffd4\125\uffd4\126\uffd4\001\002\000\004\005\132" +
    "\001\002\000\054\003\uffd3\006\uffd3\007\uffd3\021\uffd3\030" +
    "\uffd3\035\uffd3\062\uffd3\063\uffd3\065\uffd3\067\uffd3\070\uffd3" +
    "\071\uffd3\101\uffd3\103\uffd3\104\uffd3\105\uffd3\110\uffd3\115" +
    "\uffd3\123\uffd3\125\uffd3\126\uffd3\001\002\000\016\003\135" +
    "\006\053\007\060\030\136\062\071\063\067\001\002\000" +
    "\030\022\144\023\143\024\140\025\150\026\141\027\146" +
    "\031\211\040\152\041\142\042\145\043\151\001\002\000" +
    "\004\031\165\001\002\000\014\006\053\007\060\030\136" +
    "\062\071\063\067\001\002\000\030\022\144\023\143\024" +
    "\140\025\150\026\141\027\146\031\147\040\152\041\142" +
    "\042\145\043\151\001\002\000\014\006\053\007\060\030" +
    "\136\062\071\063\067\001\002\000\014\006\053\007\060" +
    "\030\136\062\071\063\067\001\002\000\014\006\053\007" +
    "\060\030\136\062\071\063\067\001\002\000\014\006\053" +
    "\007\060\030\136\062\071\063\067\001\002\000\014\006" +
    "\053\007\060\030\136\062\071\063\067\001\002\000\014" +
    "\006\053\007\060\030\136\062\071\063\067\001\002\000" +
    "\014\006\053\007\060\030\136\062\071\063\067\001\002" +
    "\000\054\003\uffbb\005\uffbb\010\uffbb\011\uffbb\012\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\031\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\001\002\000\014\006\053\007\060" +
    "\030\136\062\071\063\067\001\002\000\014\006\053\007" +
    "\060\030\136\062\071\063\067\001\002\000\014\006\053" +
    "\007\060\030\136\062\071\063\067\001\002\000\054\003" +
    "\uffc6\005\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\022\uffc6\023\143\024\140\025" +
    "\150\026\141\027\146\031\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\001\002\000\054\003\uffc3\005\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\022\uffc3\023\143\024\140\025\150\026\141\027\146\031" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\001\002\000\054" +
    "\003\uffca\005\uffca\010\uffca\011\uffca\012\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\031\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\001\002\000\054\003\uffc8\005\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\031\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\001\002\000" +
    "\054\003\uffc4\005\uffc4\010\uffc4\011\uffc4\012\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\022\uffc4\023\143\024" +
    "\140\025\150\026\141\027\146\031\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\001\002\000\054\003\uffc7\005\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\022\uffc7\023\143\024\140\025\150\026\141\027" +
    "\146\031\uffc7\040\152\041\142\042\145\043\151\001\002" +
    "\000\054\003\uffcc\005\uffcc\010\uffcc\011\uffcc\012\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\150\026\141\027\146\031\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\001\002\000\054\003\uffc5\005\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\022\uffc5\023\143\024\140\025\150\026\141" +
    "\027\146\031\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\001" +
    "\002\000\054\003\uffc9\005\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\001\002\000\054\003\uffcb\005" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\022\uffcb\023\uffcb\024\uffcb\025\150\026" +
    "\141\027\146\031\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\001\002\000\004\034\166\001\002\000\006\066\173\072" +
    "\167\001\002\000\006\003\205\036\206\001\002\000\004" +
    "\035\uff9f\001\002\000\010\035\uffa0\066\173\072\167\001" +
    "\002\000\004\035\203\001\002\000\010\003\175\063\174" +
    "\067\176\001\002\000\004\036\201\001\002\000\010\035" +
    "\uff9c\066\uff9c\072\uff9c\001\002\000\004\036\177\001\002" +
    "\000\004\034\115\001\002\000\010\035\uff9d\066\uff9d\072" +
    "\uff9d\001\002\000\004\034\115\001\002\000\010\035\uff9e" +
    "\066\uff9e\072\uff9e\001\002\000\054\003\uffa2\006\uffa2\007" +
    "\uffa2\021\uffa2\030\uffa2\035\uffa2\062\uffa2\063\uffa2\065\uffa2" +
    "\067\uffa2\070\uffa2\071\uffa2\101\uffa2\103\uffa2\104\uffa2\105" +
    "\uffa2\110\uffa2\115\uffa2\123\uffa2\125\uffa2\126\uffa2\001\002" +
    "\000\004\035\uffa1\001\002\000\004\035\uff9a\001\002\000" +
    "\004\034\115\001\002\000\006\003\210\035\uff9b\001\002" +
    "\000\004\035\uff99\001\002\000\004\034\212\001\002\000" +
    "\006\066\173\072\167\001\002\000\004\035\214\001\002" +
    "\000\054\003\uffa3\006\uffa3\007\uffa3\021\uffa3\030\uffa3\035" +
    "\uffa3\062\uffa3\063\uffa3\065\uffa3\067\uffa3\070\uffa3\071\uffa3" +
    "\101\uffa3\103\uffa3\104\uffa3\105\uffa3\110\uffa3\115\uffa3\123" +
    "\uffa3\125\uffa3\126\uffa3\001\002\000\014\006\053\007\060" +
    "\030\136\062\071\063\067\001\002\000\014\006\053\007" +
    "\060\030\136\062\071\063\067\001\002\000\014\006\053" +
    "\007\060\030\136\062\071\063\067\001\002\000\014\006" +
    "\053\007\060\030\136\062\071\063\067\001\002\000\014" +
    "\006\053\007\060\030\136\062\071\063\067\001\002\000" +
    "\014\006\053\007\060\030\136\062\071\063\067\001\002" +
    "\000\040\003\uffba\005\uffba\017\uffba\020\uffba\022\144\023" +
    "\143\024\140\025\150\026\141\027\146\031\uffba\040\152" +
    "\041\142\042\145\043\151\001\002\000\040\003\uffb8\005" +
    "\uffb8\017\uffb8\020\uffb8\022\144\023\143\024\140\025\150" +
    "\026\141\027\146\031\uffb8\040\152\041\142\042\145\043" +
    "\151\001\002\000\040\003\uffb5\005\uffb5\017\uffb5\020\uffb5" +
    "\022\144\023\143\024\140\025\150\026\141\027\146\031" +
    "\uffb5\040\152\041\142\042\145\043\151\001\002\000\040" +
    "\003\uffb7\005\uffb7\017\uffb7\020\uffb7\022\144\023\143\024" +
    "\140\025\150\026\141\027\146\031\uffb7\040\152\041\142" +
    "\042\145\043\151\001\002\000\040\003\uffb6\005\uffb6\017" +
    "\uffb6\020\uffb6\022\144\023\143\024\140\025\150\026\141" +
    "\027\146\031\uffb6\040\152\041\142\042\145\043\151\001" +
    "\002\000\040\003\uffb9\005\uffb9\017\uffb9\020\uffb9\022\144" +
    "\023\143\024\140\025\150\026\141\027\146\031\uffb9\040" +
    "\152\041\142\042\145\043\151\001\002\000\022\002\uffe8" +
    "\003\uffe8\067\uffe8\070\uffe8\104\uffe8\105\uffe8\110\uffe8\121" +
    "\uffe8\001\002\000\054\003\uffd7\006\uffd7\007\uffd7\021\uffd7" +
    "\030\uffd7\035\uffd7\062\uffd7\063\uffd7\065\uffd7\067\uffd7\070" +
    "\uffd7\071\uffd7\101\uffd7\103\uffd7\104\uffd7\105\uffd7\110\uffd7" +
    "\115\uffd7\123\uffd7\125\uffd7\126\uffd7\001\002\000\004\035" +
    "\uffe2\001\002\000\016\006\053\007\060\021\063\030\056" +
    "\062\071\063\067\001\002\000\016\006\053\007\060\021" +
    "\063\030\056\062\071\063\067\001\002\000\014\003\uffb4" +
    "\005\uffb4\017\uffb4\020\234\031\uffb4\001\002\000\042\010" +
    "\222\011\221\012\217\014\216\015\220\016\215\022\144" +
    "\023\143\024\140\025\150\026\141\027\146\040\152\041" +
    "\142\042\145\043\151\001\002\000\014\003\uffb3\005\uffb3" +
    "\017\uffb3\020\uffb3\031\uffb3\001\002\000\054\003\uffdf\006" +
    "\uffdf\007\uffdf\021\uffdf\030\uffdf\035\uffdf\062\uffdf\063\uffdf" +
    "\065\uffdf\067\uffdf\070\uffdf\071\uffdf\101\uffdf\103\uffdf\104" +
    "\uffdf\105\uffdf\110\uffdf\115\uffdf\123\uffdf\125\uffdf\126\uffdf" +
    "\001\002\000\054\003\uffc1\005\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\031\uffc1\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\001\002\000\054\003\uffc2" +
    "\005\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\031\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\001\002\000\010\062\245\063\246\067\247\001\002" +
    "\000\004\031\uffef\001\002\000\004\031\uffee\001\002\000" +
    "\004\031\uffed\001\002\000\004\031\251\001\002\000\124" +
    "\003\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\035\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\062\uffcf\063\uffcf\065\uffcf\067\uffcf\070\uffcf\071\uffcf\101" +
    "\uffcf\103\uffcf\104\uffcf\105\uffcf\110\uffcf\115\uffcf\123\uffcf" +
    "\125\uffcf\126\uffcf\001\002\000\016\006\053\007\060\021" +
    "\063\030\056\062\071\063\067\001\002\000\004\031\254" +
    "\001\002\000\004\034\115\001\002\000\056\003\uffb0\006" +
    "\uffb0\007\uffb0\021\uffb0\030\uffb0\035\uffb0\062\uffb0\063\uffb0" +
    "\065\uffb0\067\uffb0\070\uffb0\071\uffb0\075\257\101\uffb0\103" +
    "\uffb0\104\uffb0\105\uffb0\110\uffb0\115\uffb0\123\uffb0\125\uffb0" +
    "\126\uffb0\001\002\000\054\003\uffaf\006\uffaf\007\uffaf\021" +
    "\uffaf\030\uffaf\035\uffaf\062\uffaf\063\uffaf\065\uffaf\067\uffaf" +
    "\070\uffaf\071\uffaf\101\uffaf\103\uffaf\104\uffaf\105\uffaf\110" +
    "\uffaf\115\uffaf\123\uffaf\125\uffaf\126\uffaf\001\002\000\004" +
    "\003\260\001\002\000\054\003\uffae\006\uffae\007\uffae\021" +
    "\uffae\030\uffae\035\uffae\062\uffae\063\uffae\065\uffae\067\uffae" +
    "\070\uffae\071\uffae\101\uffae\103\uffae\104\uffae\105\uffae\110" +
    "\uffae\115\uffae\123\uffae\125\uffae\126\uffae\001\002\000\004" +
    "\035\uffe3\001\002\000\014\003\uffb2\005\uffb2\017\uffb2\020" +
    "\uffb2\031\uffb2\001\002\000\020\006\053\007\060\021\063" +
    "\030\056\031\265\062\071\063\067\001\002\000\004\031" +
    "\267\001\002\000\004\005\266\001\002\000\054\003\uffd0" +
    "\006\uffd0\007\uffd0\021\uffd0\030\uffd0\035\uffd0\062\uffd0\063" +
    "\uffd0\065\uffd0\067\uffd0\070\uffd0\071\uffd0\101\uffd0\103\uffd0" +
    "\104\uffd0\105\uffd0\110\uffd0\115\uffd0\123\uffd0\125\uffd0\126" +
    "\uffd0\001\002\000\004\005\270\001\002\000\054\003\uffd1" +
    "\006\uffd1\007\uffd1\021\uffd1\030\uffd1\035\uffd1\062\uffd1\063" +
    "\uffd1\065\uffd1\067\uffd1\070\uffd1\071\uffd1\101\uffd1\103\uffd1" +
    "\104\uffd1\105\uffd1\110\uffd1\115\uffd1\123\uffd1\125\uffd1\126" +
    "\uffd1\001\002\000\054\003\uffbf\005\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\031\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\001\002\000\054\003" +
    "\uffa7\006\uffa7\007\uffa7\021\uffa7\030\uffa7\035\uffa7\062\uffa7" +
    "\063\uffa7\065\uffa7\067\uffa7\070\uffa7\071\uffa7\101\uffa7\103" +
    "\uffa7\104\uffa7\105\uffa7\110\uffa7\115\uffa7\123\uffa7\125\uffa7" +
    "\126\uffa7\001\002\000\020\003\275\006\053\007\060\021" +
    "\063\030\056\062\071\063\067\001\002\000\004\005\306" +
    "\001\002\000\006\005\276\031\277\001\002\000\016\006" +
    "\053\007\060\021\063\030\056\062\071\063\067\001\002" +
    "\000\004\034\115\001\002\000\054\003\uffa8\006\uffa8\007" +
    "\uffa8\021\uffa8\030\uffa8\035\uffa8\062\uffa8\063\uffa8\065\uffa8" +
    "\067\uffa8\070\uffa8\071\uffa8\101\uffa8\103\uffa8\104\uffa8\105" +
    "\uffa8\110\uffa8\115\uffa8\123\uffa8\125\uffa8\126\uffa8\001\002" +
    "\000\004\005\302\001\002\000\016\006\053\007\060\021" +
    "\063\030\056\062\071\063\067\001\002\000\004\031\304" +
    "\001\002\000\004\034\115\001\002\000\054\003\uffac\006" +
    "\uffac\007\uffac\021\uffac\030\uffac\035\uffac\062\uffac\063\uffac" +
    "\065\uffac\067\uffac\070\uffac\071\uffac\101\uffac\103\uffac\104" +
    "\uffac\105\uffac\110\uffac\115\uffac\123\uffac\125\uffac\126\uffac" +
    "\001\002\000\020\003\310\006\053\007\060\021\063\030" +
    "\056\062\071\063\067\001\002\000\004\005\315\001\002" +
    "\000\004\005\311\001\002\000\016\006\053\007\060\021" +
    "\063\030\056\062\071\063\067\001\002\000\004\031\313" +
    "\001\002\000\004\034\115\001\002\000\054\003\uffab\006" +
    "\uffab\007\uffab\021\uffab\030\uffab\035\uffab\062\uffab\063\uffab" +
    "\065\uffab\067\uffab\070\uffab\071\uffab\101\uffab\103\uffab\104" +
    "\uffab\105\uffab\110\uffab\115\uffab\123\uffab\125\uffab\126\uffab" +
    "\001\002\000\020\003\317\006\053\007\060\021\063\030" +
    "\056\062\071\063\067\001\002\000\006\003\323\031\322" +
    "\001\002\000\004\031\320\001\002\000\004\034\115\001" +
    "\002\000\054\003\uffaa\006\uffaa\007\uffaa\021\uffaa\030\uffaa" +
    "\035\uffaa\062\uffaa\063\uffaa\065\uffaa\067\uffaa\070\uffaa\071" +
    "\uffaa\101\uffaa\103\uffaa\104\uffaa\105\uffaa\110\uffaa\115\uffaa" +
    "\123\uffaa\125\uffaa\126\uffaa\001\002\000\004\034\115\001" +
    "\002\000\054\003\uffa9\006\uffa9\007\uffa9\021\uffa9\030\uffa9" +
    "\035\uffa9\062\uffa9\063\uffa9\065\uffa9\067\uffa9\070\uffa9\071" +
    "\uffa9\101\uffa9\103\uffa9\104\uffa9\105\uffa9\110\uffa9\115\uffa9" +
    "\123\uffa9\125\uffa9\126\uffa9\001\002\000\054\003\uffad\006" +
    "\uffad\007\uffad\021\uffad\030\uffad\035\uffad\062\uffad\063\uffad" +
    "\065\uffad\067\uffad\070\uffad\071\uffad\101\uffad\103\uffad\104" +
    "\uffad\105\uffad\110\uffad\115\uffad\123\uffad\125\uffad\126\uffad" +
    "\001\002\000\010\017\235\020\234\031\327\001\002\000" +
    "\044\010\222\011\221\012\217\014\216\015\220\016\215" +
    "\022\144\023\143\024\140\025\150\026\141\027\146\031" +
    "\147\040\152\041\142\042\145\043\151\001\002\000\014" +
    "\003\uffb1\005\uffb1\017\uffb1\020\uffb1\031\uffb1\001\002\000" +
    "\054\003\uffd6\006\uffd6\007\uffd6\021\uffd6\030\uffd6\035\uffd6" +
    "\062\uffd6\063\uffd6\065\uffd6\067\uffd6\070\uffd6\071\uffd6\101" +
    "\uffd6\103\uffd6\104\uffd6\105\uffd6\110\uffd6\115\uffd6\123\uffd6" +
    "\125\uffd6\126\uffd6\001\002\000\054\003\uffc0\005\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\031\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\001\002" +
    "\000\006\004\333\031\uffe5\001\002\000\016\003\013\031" +
    "\uffe4\067\016\104\004\105\005\110\017\001\002\000\004" +
    "\031\uffe6\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\000\001\002\000\004\030\340\001\002\000\016\003\013" +
    "\031\uffe4\067\016\104\004\105\005\110\017\001\002\000" +
    "\004\031\342\001\002\000\004\034\343\001\002\000\052" +
    "\003\075\006\053\007\060\021\063\030\056\062\071\063" +
    "\067\065\076\067\016\070\020\071\055\101\057\103\070" +
    "\104\004\105\005\110\017\115\101\123\104\125\102\126" +
    "\061\001\002\000\004\035\345\001\002\000\022\002\uffe7" +
    "\003\uffe7\067\uffe7\070\uffe7\104\uffe7\105\uffe7\110\uffe7\121" +
    "\uffe7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\016\003\005\004\011\006\010\007\007\035" +
    "\014\036\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\005\004\011\006\010\007\345\035\014\036" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\005\004\011\006\010\007\334\035\014\036\013\001" +
    "\001\000\006\005\041\010\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\020\001\001\000\006\005\024" +
    "\010\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\045\012\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\065\004\105\013\076\015\077\016\073\017" +
    "\072\020\071\021\063\022\061\023\102\024\053\031\051" +
    "\032\064\033\104\035\014\036\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\325\017\324\033\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\236\017\261\033\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\065\004\105\013\260" +
    "\015\077\016\073\017\072\020\071\021\063\022\061\023" +
    "\102\024\053\031\051\032\064\033\104\035\014\036\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\065" +
    "\004\105\013\232\015\077\016\073\017\072\020\071\021" +
    "\063\022\061\023\102\024\053\031\051\032\064\033\104" +
    "\035\014\036\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\041\010\040\001\001\000\002" +
    "\001\001\000\012\015\077\017\072\020\111\033\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\113" +
    "\001\001\000\002\001\001\000\042\003\065\004\105\013" +
    "\115\015\077\016\073\017\072\020\071\021\063\022\061" +
    "\023\102\024\053\031\051\032\064\033\104\035\014\036" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\133\033\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\136\033" +
    "\110\001\001\000\002\001\001\000\006\015\163\033\110" +
    "\001\001\000\006\015\162\033\110\001\001\000\006\015" +
    "\161\033\110\001\001\000\006\015\160\033\110\001\001" +
    "\000\006\015\157\033\110\001\001\000\006\015\156\033" +
    "\110\001\001\000\006\015\155\033\110\001\001\000\002" +
    "\001\001\000\006\015\154\033\110\001\001\000\006\015" +
    "\153\033\110\001\001\000\006\015\152\033\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\171\027\170\030\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\203\027\170\030\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\177\001\001\000\002\001\001\000\004" +
    "\025\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\026\212\027\170\030\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\227\033\110\001\001\000" +
    "\006\015\226\033\110\001\001\000\006\015\225\033\110" +
    "\001\001\000\006\015\224\033\110\001\001\000\006\015" +
    "\223\033\110\001\001\000\006\015\222\033\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\236\017\237\033\110\001\001\000\010\015\236\017\235" +
    "\033\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\077\017\072\020\252\033\110\001" +
    "\001\000\002\001\001\000\004\025\254\001\001\000\004" +
    "\037\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\077\017\072\020\263\033\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\077\017\072\020\273\033\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\077\017\072\020" +
    "\300\033\110\001\001\000\004\025\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\077\017\072\020" +
    "\302\033\110\001\001\000\002\001\001\000\004\025\304" +
    "\001\001\000\002\001\001\000\012\015\077\017\072\020" +
    "\306\033\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\077\017\072\020\311\033\110\001\001\000" +
    "\002\001\001\000\004\025\313\001\001\000\002\001\001" +
    "\000\012\015\077\017\072\020\315\033\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\320\001\001" +
    "\000\002\001\001\000\004\025\323\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\045\012\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\045\012\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\065\004\105\013\343\015" +
    "\077\016\073\017\072\020\071\021\063\022\061\023\102" +
    "\024\053\031\051\032\064\033\104\035\014\036\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol sym = (Symbol) info;
            TokenInfo tokenInf = (TokenInfo) sym.value;
            if(!message.equals("Syntax error")){
                System.err.printf("Syntax Error: %s near token %s at line %d, column %d%n",
                        message, tokenInf.value, tokenInf.line, tokenInf.column);
            }
            else{
                System.err.printf("Syntax Error: related with token %s at line %d, column %d%n",
                        tokenInf.value, tokenInf.line, tokenInf.column);
            }

        } else {
            System.err.println("Syntax Error: " + message);
        }
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error: Unable to continue parsing.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // default_block ::= DEFAULT COLON statement_block error 
            {
              Object RESULT = null;
		parser.report_error("Only one default is permitted", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(22/*default_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // default_block ::= DEFAULT error 
            {
              Object RESULT = null;
		parser.report_error("Default block error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(22/*default_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // default_block ::= DEFAULT COLON statement_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(22/*default_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // case_block ::= CASE error 
            {
              Object RESULT = null;
		parser.report_error("Case block error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(21/*case_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // case_block ::= CASE CHAR COLON statement_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(21/*case_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // case_block ::= CASE NUM COLON statement_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(21/*case_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_blocks ::= default_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(20/*case_blocks*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_blocks ::= case_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(20/*case_blocks*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // case_blocks ::= case_block case_blocks 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(20/*case_blocks*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // switch_statement ::= SWITCH LPAREN error RPAREN LBRACE case_blocks RBRACE 
            {
              Object RESULT = null;
		parser.report_error("Switch structure error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(18/*switch_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // switch_statement ::= SWITCH LPAREN arithmeticExpression RPAREN LBRACE case_blocks RBRACE 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(18/*switch_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // while_statement ::= WHILE error 
            {
              Object RESULT = null;
		parser.report_error("While structure error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(17/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // while_statement ::= WHILE LPAREN RPAREN statement_block 
            {
              Object RESULT = null;
		parser.report_error("While expression can't be empty", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(17/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // while_statement ::= WHILE LPAREN expression RPAREN statement_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(17/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_statement ::= FOR error 
            {
              Object RESULT = null;
		parser.report_error("For structure error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_statement ::= FOR LPAREN error RPAREN statement_block 
            {
              Object RESULT = null;
		parser.report_error("For expression error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for_statement ::= FOR LPAREN expression SEMICOLON expression SEMICOLON expression error 
            {
              Object RESULT = null;
		parser.report_error("For body error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_statement ::= FOR LPAREN expression SEMICOLON expression SEMICOLON error RPAREN statement_block 
            {
              Object RESULT = null;
		parser.report_error("For third expression error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // for_statement ::= FOR LPAREN expression SEMICOLON error SEMICOLON expression RPAREN statement_block 
            {
              Object RESULT = null;
		parser.report_error("For second expression error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for_statement ::= FOR LPAREN error SEMICOLON expression SEMICOLON expression RPAREN statement_block 
            {
              Object RESULT = null;
		parser.report_error("For first expression error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for_statement ::= FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statement_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if_statement ::= IF LPAREN expression RPAREN statement_block ELSE error 
            {
              Object RESULT = null;
		 parser.report_error("Error: Uso duplicado de 'else' en 'if'.", parser.scan()); 
              CUP$CParser$result = new java_cup.runtime.Symbol(15/*if_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // if_statement ::= IF LPAREN expression RPAREN statement_block else_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(15/*if_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // if_statement ::= IF LPAREN expression RPAREN statement_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(15/*if_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // booleanExpression ::= LPAREN booleanExpression RPAREN 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // booleanExpression ::= NOT booleanExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // booleanExpression ::= booleanExpression ANDAND booleanExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // booleanExpression ::= booleanExpression OROR booleanExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // booleanExpression ::= arithmeticExpression LESS arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // booleanExpression ::= arithmeticExpression LESSEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // booleanExpression ::= arithmeticExpression GREATER arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // booleanExpression ::= arithmeticExpression GREATEREQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // booleanExpression ::= arithmeticExpression NOTEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // booleanExpression ::= arithmeticExpression EQUALS arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arithmeticExpression ::= LPAREN arithmeticExpression RPAREN 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arithmeticExpression ::= function_call 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arithmeticExpression ::= ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arithmeticExpression ::= NUM 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arithmeticExpression ::= DECREMENT ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arithmeticExpression ::= INCREMENT ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arithmeticExpression ::= ID DECREMENT 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arithmeticExpression ::= ID INCREMENT 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arithmeticExpression ::= arithmeticExpression DIVIDEEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arithmeticExpression ::= arithmeticExpression TIMESEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arithmeticExpression ::= arithmeticExpression MINUSEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arithmeticExpression ::= arithmeticExpression PLUSEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arithmeticExpression ::= arithmeticExpression ASSIGN arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arithmeticExpression ::= arithmeticExpression MODULO arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arithmeticExpression ::= arithmeticExpression DIVIDE arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arithmeticExpression ::= arithmeticExpression TIMES arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arithmeticExpression ::= arithmeticExpression MINUS arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arithmeticExpression ::= arithmeticExpression PLUS arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= booleanExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_call ::= ID LPAREN params RPAREN 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(25/*function_call*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // write_statement ::= WRITE LPAREN RPAREN SEMICOLON 
            {
              Object RESULT = null;
		parser.report_error("Invalid parameters in write", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(24/*write_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // write_statement ::= WRITE LPAREN expression RPAREN SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(24/*write_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // read_statement ::= READ LPAREN error RPAREN SEMICOLON 
            {
              Object RESULT = null;
		parser.report_error("Invalid parameters in read", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(23/*read_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // read_statement ::= READ LPAREN ID RPAREN SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(23/*read_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // read_statement ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(23/*read_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement_block ::= LBRACE funcImpl RBRACE 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(19/*statement_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= CONTINUE SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= BREAK SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= function_call 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= read_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= write_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= switch_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= while_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= for_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= if_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= expression SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcImpl ::= error 
            {
              Object RESULT = null;
		parser.report_error("Function implementation error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(9/*funcImpl*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcImpl ::= statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(9/*funcImpl*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcImpl ::= statement funcImpl 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(9/*funcImpl*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcImpl ::= varDeclaration funcImpl 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(9/*funcImpl*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // paramChain ::= 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(8/*paramChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // paramChain ::= type ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(8/*paramChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // paramChain ::= type ID COMMA paramChain 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(8/*paramChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcDeclaration ::= VOID ID LPAREN paramChain RPAREN LBRACE funcImpl RBRACE 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(4/*funcDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcDeclaration ::= type ID LPAREN paramChain RPAREN LBRACE funcImpl RBRACE 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(4/*funcDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignationChain ::= error 
            {
              Object RESULT = null;
		parser.report_error("Assignation error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(7/*asignationChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignationChain ::= NUM 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(7/*asignationChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignationChain ::= NUM COMMA asignationChain 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(7/*asignationChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varAsignation ::= idChain ASSIGN asignationChain 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(6/*varAsignation*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // params ::= CHAR 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(26/*params*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // params ::= NUM 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(26/*params*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // params ::= ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(26/*params*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= error 
            {
              Object RESULT = null;
		parser.report_error("Invalid type", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= SHORT 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= LONG 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= CHAR 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= INT 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // idChain ::= error 
            {
              Object RESULT = null;
		
              CUP$CParser$result = new java_cup.runtime.Symbol(3/*idChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // idChain ::= ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(3/*idChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // idChain ::= idChain COMMA ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(3/*idChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // validVarDeclaration ::= type varAsignation SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(27/*validVarDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // validVarDeclaration ::= CONST type varAsignation SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(27/*validVarDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // validVarDeclaration ::= type idChain SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(27/*validVarDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // validVarDeclaration ::= CONST type idChain SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(27/*validVarDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varDeclaration ::= varDeclarationError 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(1/*varDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // varDeclaration ::= validVarDeclaration 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(1/*varDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globalProg ::= funcDeclaration 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(5/*globalProg*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globalProg ::= funcDeclaration globalProg 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(5/*globalProg*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= globalProg EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // globalProg ::= varDeclaration globalProg 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(5/*globalProg*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

