
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Nov 18 00:34:37 UTC 2024
//----------------------------------------------------

import java_cup.runtime.Symbol;
import TokenTable.TokenInfo;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Mon Nov 18 00:34:37 UTC 2024
  */
public class CParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\007\004\000\002\002\004\000\002\007" +
    "\004\000\002\007\003\000\002\003\006\000\002\003\005" +
    "\000\002\003\006\000\002\003\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\034\003\000\002\034\003\000\002\010" +
    "\005\000\002\005\005\000\002\005\003\000\002\011\005" +
    "\000\002\011\003\000\002\011\003\000\002\006\012\000" +
    "\002\006\012\000\002\012\006\000\002\012\004\000\002" +
    "\012\002\000\002\013\004\000\002\013\004\000\002\013" +
    "\003\000\002\013\003\000\002\016\004\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\004\000\002\016\004\000\002\025\005\000\002\031" +
    "\006\000\002\031\007\000\002\031\007\000\002\032\007" +
    "\000\002\032\006\000\002\033\006\000\002\033\005\000" +
    "\002\020\003\000\002\020\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\004\000\002" +
    "\017\005\000\002\021\007\000\002\021\010\000\002\021" +
    "\011\000\002\022\013\000\002\022\013\000\002\022\013" +
    "\000\002\022\013\000\002\022\012\000\002\022\007\000" +
    "\002\022\004\000\002\023\007\000\002\023\006\000\002" +
    "\023\004\000\002\024\011\000\002\024\011\000\002\026" +
    "\004\000\002\026\003\000\002\026\003\000\002\027\006" +
    "\000\002\027\006\000\002\027\004\000\002\030\005\000" +
    "\002\030\004\000\002\030\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\020\003\012\067\014\070\016\104\004\105" +
    "\005\110\015\121\007\001\002\000\004\062\ufff9\001\002" +
    "\000\004\062\ufff7\001\002\000\020\003\012\067\014\070" +
    "\016\104\004\105\005\110\015\121\007\001\002\000\004" +
    "\062\334\001\002\000\004\002\333\001\002\000\022\002" +
    "\ufffe\003\012\067\014\070\016\104\004\105\005\110\015" +
    "\121\007\001\002\000\004\062\ufff5\001\002\000\004\062" +
    "\134\001\002\000\004\062\ufff8\001\002\000\004\062\ufff6" +
    "\001\002\000\014\003\012\067\014\104\004\105\005\110" +
    "\015\001\002\000\004\062\020\001\002\000\010\004\ufff0" +
    "\005\ufff0\022\ufff0\001\002\000\004\005\133\001\002\000" +
    "\010\004\023\005\024\022\025\001\002\000\004\062\132" +
    "\001\002\000\054\003\ufffd\006\ufffd\007\ufffd\021\ufffd\030" +
    "\ufffd\062\ufffd\063\ufffd\065\ufffd\067\ufffd\070\ufffd\071\ufffd" +
    "\101\ufffd\103\ufffd\104\ufffd\105\ufffd\110\ufffd\115\ufffd\121" +
    "\ufffd\123\ufffd\125\ufffd\126\ufffd\001\002\000\020\003\036" +
    "\006\030\007\033\021\037\030\040\062\035\063\027\001" +
    "\002\000\016\003\uffd1\004\uffd1\005\uffd1\017\111\020\110" +
    "\031\uffd1\001\002\000\056\003\uffc1\004\uffc1\005\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\031\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\001\002" +
    "\000\004\062\131\001\002\000\006\004\127\005\ufff2\001" +
    "\002\000\056\003\uffbf\004\uffbf\005\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\031\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\001\002\000\004\062" +
    "\126\001\002\000\006\004\uffee\005\uffee\001\002\000\064" +
    "\003\uffc0\004\uffc0\005\uffc0\006\117\007\116\010\uffc0\011" +
    "\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\120\031\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\001\002" +
    "\000\006\004\uffed\005\uffed\001\002\000\016\006\030\007" +
    "\033\021\037\030\040\062\035\063\027\001\002\000\016" +
    "\006\030\007\033\021\037\030\040\062\035\063\027\001" +
    "\002\000\052\003\uffd0\004\uffd0\005\uffd0\010\060\011\056" +
    "\012\047\014\046\015\053\016\043\022\051\023\050\024" +
    "\042\025\055\026\044\027\054\031\uffd0\040\061\041\045" +
    "\042\052\043\057\001\002\000\014\006\030\007\033\030" +
    "\063\062\035\063\027\001\002\000\014\006\030\007\033" +
    "\030\063\062\035\063\027\001\002\000\014\006\030\007" +
    "\033\030\063\062\035\063\027\001\002\000\014\006\030" +
    "\007\033\030\063\062\035\063\027\001\002\000\014\006" +
    "\030\007\033\030\063\062\035\063\027\001\002\000\014" +
    "\006\030\007\033\030\063\062\035\063\027\001\002\000" +
    "\014\006\030\007\033\030\063\062\035\063\027\001\002" +
    "\000\014\006\030\007\033\030\063\062\035\063\027\001" +
    "\002\000\014\006\030\007\033\030\063\062\035\063\027" +
    "\001\002\000\014\006\030\007\033\030\063\062\035\063" +
    "\027\001\002\000\014\006\030\007\033\030\063\062\035" +
    "\063\027\001\002\000\014\006\030\007\033\030\063\062" +
    "\035\063\027\001\002\000\014\006\030\007\033\030\063" +
    "\062\035\063\027\001\002\000\014\006\030\007\033\030" +
    "\063\062\035\063\027\001\002\000\014\006\030\007\033" +
    "\030\063\062\035\063\027\001\002\000\014\006\030\007" +
    "\033\030\063\062\035\063\027\001\002\000\056\003\uffc9" +
    "\004\uffc9\005\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\022\uffc9\023\050\024\042" +
    "\025\055\026\044\027\054\031\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\001\002\000\014\006\030\007\033\030\063" +
    "\062\035\063\027\001\002\000\030\022\051\023\050\024" +
    "\042\025\055\026\044\027\054\031\065\040\061\041\045" +
    "\042\052\043\057\001\002\000\056\003\uffbe\004\uffbe\005" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\031\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\001\002\000\042\003\uffbd\004\uffbd\005\uffbd\017\uffbd\020" +
    "\uffbd\022\051\023\050\024\042\025\055\026\044\027\054" +
    "\031\uffbd\040\061\041\045\042\052\043\057\001\002\000" +
    "\056\003\uffc6\004\uffc6\005\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\022\uffc6\023" +
    "\050\024\042\025\055\026\044\027\054\031\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\001\002\000\042\003\uffbb\004" +
    "\uffbb\005\uffbb\017\uffbb\020\uffbb\022\051\023\050\024\042" +
    "\025\055\026\044\027\054\031\uffbb\040\061\041\045\042" +
    "\052\043\057\001\002\000\056\003\uffcd\004\uffcd\005\uffcd" +
    "\010\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\031\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\001" +
    "\002\000\056\003\uffcb\004\uffcb\005\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\001\002\000\042\003" +
    "\uffb8\004\uffb8\005\uffb8\017\uffb8\020\uffb8\022\051\023\050" +
    "\024\042\025\055\026\044\027\054\031\uffb8\040\061\041" +
    "\045\042\052\043\057\001\002\000\056\003\uffc7\004\uffc7" +
    "\005\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\022\uffc7\023\050\024\042\025\055" +
    "\026\044\027\054\031\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\001\002\000\056\003\uffca\004\uffca\005\uffca\010\uffca" +
    "\011\uffca\012\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020" +
    "\uffca\022\uffca\023\050\024\042\025\055\026\044\027\054" +
    "\031\uffca\040\061\041\045\042\052\043\057\001\002\000" +
    "\056\003\uffcf\004\uffcf\005\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\055\026\044\027\054\031\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\001\002\000\042\003\uffba\004" +
    "\uffba\005\uffba\017\uffba\020\uffba\022\051\023\050\024\042" +
    "\025\055\026\044\027\054\031\uffba\040\061\041\045\042" +
    "\052\043\057\001\002\000\042\003\uffb9\004\uffb9\005\uffb9" +
    "\017\uffb9\020\uffb9\022\051\023\050\024\042\025\055\026" +
    "\044\027\054\031\uffb9\040\061\041\045\042\052\043\057" +
    "\001\002\000\056\003\uffc8\004\uffc8\005\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\022\uffc8\023\050\024\042\025\055\026\044\027\054\031" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\001\002\000\056" +
    "\003\uffcc\004\uffcc\005\uffcc\010\uffcc\011\uffcc\012\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\001\002\000\042\003\uffbc\004\uffbc" +
    "\005\uffbc\017\uffbc\020\uffbc\022\051\023\050\024\042\025" +
    "\055\026\044\027\054\031\uffbc\040\061\041\045\042\052" +
    "\043\057\001\002\000\056\003\uffce\004\uffce\005\uffce\010" +
    "\uffce\011\uffce\012\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\022\uffce\023\uffce\024\uffce\025\055\026\044\027" +
    "\054\031\uffce\040\uffce\041\uffce\042\uffce\043\uffce\001\002" +
    "\000\010\017\111\020\110\031\107\001\002\000\044\010" +
    "\060\011\056\012\047\014\046\015\053\016\043\022\051" +
    "\023\050\024\042\025\055\026\044\027\054\031\065\040" +
    "\061\041\045\042\052\043\057\001\002\000\016\003\uffb4" +
    "\004\uffb4\005\uffb4\017\uffb4\020\uffb4\031\uffb4\001\002\000" +
    "\016\006\030\007\033\021\037\030\040\062\035\063\027" +
    "\001\002\000\016\006\030\007\033\021\037\030\040\062" +
    "\035\063\027\001\002\000\016\003\uffb7\004\uffb7\005\uffb7" +
    "\017\uffb7\020\110\031\uffb7\001\002\000\042\010\060\011" +
    "\056\012\047\014\046\015\053\016\043\022\051\023\050" +
    "\024\042\025\055\026\044\027\054\040\061\041\045\042" +
    "\052\043\057\001\002\000\016\003\uffb6\004\uffb6\005\uffb6" +
    "\017\uffb6\020\uffb6\031\uffb6\001\002\000\016\003\uffb5\004" +
    "\uffb5\005\uffb5\017\uffb5\020\uffb5\031\uffb5\001\002\000\056" +
    "\003\uffc4\004\uffc4\005\uffc4\010\uffc4\011\uffc4\012\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\001\002\000\056\003\uffc5\004\uffc5" +
    "\005\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\031\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\001\002\000\022\006\030\007\033\021\037\030\040" +
    "\031\123\062\035\063\027\067\124\001\002\000\004\031" +
    "\125\001\002\000\004\031\ufff4\001\002\000\126\003\uffd2" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\035\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\062\uffd2\063\uffd2\065\uffd2\067\uffd2\070\uffd2\071\uffd2\101" +
    "\uffd2\103\uffd2\104\uffd2\105\uffd2\110\uffd2\115\uffd2\123\uffd2" +
    "\125\uffd2\126\uffd2\001\002\000\004\031\ufff3\001\002\000" +
    "\126\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\035\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\062\uffd3\063\uffd3\065\uffd3\067\uffd3\070\uffd3" +
    "\071\uffd3\101\uffd3\103\uffd3\104\uffd3\105\uffd3\110\uffd3\115" +
    "\uffd3\123\uffd3\125\uffd3\126\uffd3\001\002\000\056\003\uffc2" +
    "\004\uffc2\005\uffc2\010\uffc2\011\uffc2\012\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\031\uffc2\040\uffc2\041\uffc2\042" +
    "\uffc2\043\uffc2\001\002\000\016\006\030\007\033\021\037" +
    "\030\040\062\035\063\027\001\002\000\006\004\uffef\005" +
    "\uffef\001\002\000\056\003\uffc3\004\uffc3\005\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\031\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\001\002\000" +
    "\010\004\ufff1\005\ufff1\022\ufff1\001\002\000\054\003\ufffb" +
    "\006\ufffb\007\ufffb\021\ufffb\030\ufffb\062\ufffb\063\ufffb\065" +
    "\ufffb\067\ufffb\070\ufffb\071\ufffb\101\ufffb\103\ufffb\104\ufffb" +
    "\105\ufffb\110\ufffb\115\ufffb\121\ufffb\123\ufffb\125\ufffb\126" +
    "\ufffb\001\002\000\012\004\ufff0\005\ufff0\022\ufff0\030\141" +
    "\001\002\000\004\005\140\001\002\000\010\004\023\005" +
    "\137\022\025\001\002\000\054\003\ufffc\006\ufffc\007\ufffc" +
    "\021\ufffc\030\ufffc\062\ufffc\063\ufffc\065\ufffc\067\ufffc\070" +
    "\ufffc\071\ufffc\101\ufffc\103\ufffc\104\ufffc\105\ufffc\110\ufffc" +
    "\115\ufffc\121\ufffc\123\ufffc\125\ufffc\126\ufffc\001\002\000" +
    "\054\003\ufffa\006\ufffa\007\ufffa\021\ufffa\030\ufffa\062\ufffa" +
    "\063\ufffa\065\ufffa\067\ufffa\070\ufffa\071\ufffa\101\ufffa\103" +
    "\ufffa\104\ufffa\105\ufffa\110\ufffa\115\ufffa\121\ufffa\123\ufffa" +
    "\125\ufffa\126\ufffa\001\002\000\016\003\012\031\uffe8\067" +
    "\014\104\004\105\005\110\015\001\002\000\004\062\327" +
    "\001\002\000\004\031\144\001\002\000\004\034\145\001" +
    "\002\000\052\003\171\006\030\007\033\021\037\030\040" +
    "\062\035\063\027\065\166\067\014\070\016\071\147\101" +
    "\172\103\157\104\004\105\005\110\015\115\156\123\153" +
    "\125\146\126\160\001\002\000\004\030\316\001\002\000" +
    "\004\005\315\001\002\000\054\003\171\006\030\007\033" +
    "\021\037\030\040\035\uffe5\062\035\063\027\065\166\067" +
    "\014\070\016\071\147\101\172\103\157\104\004\105\005" +
    "\110\015\115\156\123\153\125\146\126\160\001\002\000" +
    "\054\003\uffe2\006\uffe2\007\uffe2\021\uffe2\030\uffe2\035\uffe2" +
    "\062\uffe2\063\uffe2\065\uffe2\067\uffe2\070\uffe2\071\uffe2\101" +
    "\uffe2\103\uffe2\104\uffe2\105\uffe2\110\uffe2\115\uffe2\123\uffe2" +
    "\125\uffe2\126\uffe2\001\002\000\004\062\020\001\002\000" +
    "\006\003\305\030\306\001\002\000\054\003\uffe0\006\uffe0" +
    "\007\uffe0\021\uffe0\030\uffe0\035\uffe0\062\uffe0\063\uffe0\065" +
    "\uffe0\067\uffe0\070\uffe0\071\uffe0\101\uffe0\103\uffe0\104\uffe0" +
    "\105\uffe0\110\uffe0\115\uffe0\123\uffe0\125\uffe0\126\uffe0\001" +
    "\002\000\116\003\uffdc\005\uffbf\006\uffdc\007\uffdc\010\uffbf" +
    "\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf\021\uffdc\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffdc" +
    "\035\uffdc\040\uffbf\041\uffbf\042\uffbf\043\uffbf\062\uffdc\063" +
    "\uffdc\065\uffdc\067\uffdc\070\uffdc\071\uffdc\101\uffdc\103\uffdc" +
    "\104\uffdc\105\uffdc\110\uffdc\115\uffdc\123\uffdc\125\uffdc\126" +
    "\uffdc\001\002\000\004\030\252\001\002\000\004\030\243" +
    "\001\002\000\004\030\235\001\002\000\004\035\234\001" +
    "\002\000\054\003\uffe1\006\uffe1\007\uffe1\021\uffe1\030\uffe1" +
    "\035\uffe1\062\uffe1\063\uffe1\065\uffe1\067\uffe1\070\uffe1\071" +
    "\uffe1\101\uffe1\103\uffe1\104\uffe1\105\uffe1\110\uffe1\115\uffe1" +
    "\123\uffe1\125\uffe1\126\uffe1\001\002\000\054\003\uffdf\006" +
    "\uffdf\007\uffdf\021\uffdf\030\uffdf\035\uffdf\062\uffdf\063\uffdf" +
    "\065\uffdf\067\uffdf\070\uffdf\071\uffdf\101\uffdf\103\uffdf\104" +
    "\uffdf\105\uffdf\110\uffdf\115\uffdf\123\uffdf\125\uffdf\126\uffdf" +
    "\001\002\000\004\005\233\001\002\000\054\003\uffde\006" +
    "\uffde\007\uffde\021\uffde\030\uffde\035\uffde\062\uffde\063\uffde" +
    "\065\uffde\067\uffde\070\uffde\071\uffde\101\uffde\103\uffde\104" +
    "\uffde\105\uffde\110\uffde\115\uffde\123\uffde\125\uffde\126\uffde" +
    "\001\002\000\004\005\232\001\002\000\054\003\uffdd\006" +
    "\uffdd\007\uffdd\021\uffdd\030\uffdd\035\uffdd\062\uffdd\063\uffdd" +
    "\065\uffdd\067\uffdd\070\uffdd\071\uffdd\101\uffdd\103\uffdd\104" +
    "\uffdd\105\uffdd\110\uffdd\115\uffdd\123\uffdd\125\uffdd\126\uffdd" +
    "\001\002\000\052\003\171\006\030\007\033\021\037\030" +
    "\040\062\035\063\027\065\166\067\014\070\016\071\147" +
    "\101\172\103\157\104\004\105\005\110\015\115\156\123" +
    "\153\125\146\126\160\001\002\000\006\035\uffe4\062\ufff5" +
    "\001\002\000\006\003\173\030\174\001\002\000\054\003" +
    "\uffaa\006\uffaa\007\uffaa\021\uffaa\030\uffaa\035\uffaa\062\uffaa" +
    "\063\uffaa\065\uffaa\067\uffaa\070\uffaa\071\uffaa\101\uffaa\103" +
    "\uffaa\104\uffaa\105\uffaa\110\uffaa\115\uffaa\123\uffaa\125\uffaa" +
    "\126\uffaa\001\002\000\020\003\176\006\030\007\033\021" +
    "\037\030\040\062\035\063\027\001\002\000\004\005\212" +
    "\001\002\000\006\005\177\031\200\001\002\000\016\006" +
    "\030\007\033\021\037\030\040\062\035\063\027\001\002" +
    "\000\004\034\202\001\002\000\054\003\uffab\006\uffab\007" +
    "\uffab\021\uffab\030\uffab\035\uffab\062\uffab\063\uffab\065\uffab" +
    "\067\uffab\070\uffab\071\uffab\101\uffab\103\uffab\104\uffab\105" +
    "\uffab\110\uffab\115\uffab\123\uffab\125\uffab\126\uffab\001\002" +
    "\000\052\003\171\006\030\007\033\021\037\030\040\062" +
    "\035\063\027\065\166\067\014\070\016\071\147\101\172" +
    "\103\157\104\004\105\005\110\015\115\156\123\153\125" +
    "\146\126\160\001\002\000\004\035\204\001\002\000\062" +
    "\003\uffd9\006\uffd9\007\uffd9\021\uffd9\030\uffd9\035\uffd9\062" +
    "\uffd9\063\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9" +
    "\072\uffd9\075\uffd9\101\uffd9\103\uffd9\104\uffd9\105\uffd9\110" +
    "\uffd9\115\uffd9\123\uffd9\125\uffd9\126\uffd9\001\002\000\004" +
    "\005\206\001\002\000\016\006\030\007\033\021\037\030" +
    "\040\062\035\063\027\001\002\000\004\031\210\001\002" +
    "\000\004\034\202\001\002\000\054\003\uffaf\006\uffaf\007" +
    "\uffaf\021\uffaf\030\uffaf\035\uffaf\062\uffaf\063\uffaf\065\uffaf" +
    "\067\uffaf\070\uffaf\071\uffaf\101\uffaf\103\uffaf\104\uffaf\105" +
    "\uffaf\110\uffaf\115\uffaf\123\uffaf\125\uffaf\126\uffaf\001\002" +
    "\000\020\003\214\006\030\007\033\021\037\030\040\062" +
    "\035\063\027\001\002\000\004\005\221\001\002\000\004" +
    "\005\215\001\002\000\016\006\030\007\033\021\037\030" +
    "\040\062\035\063\027\001\002\000\004\031\217\001\002" +
    "\000\004\034\202\001\002\000\054\003\uffae\006\uffae\007" +
    "\uffae\021\uffae\030\uffae\035\uffae\062\uffae\063\uffae\065\uffae" +
    "\067\uffae\070\uffae\071\uffae\101\uffae\103\uffae\104\uffae\105" +
    "\uffae\110\uffae\115\uffae\123\uffae\125\uffae\126\uffae\001\002" +
    "\000\020\003\223\006\030\007\033\021\037\030\040\062" +
    "\035\063\027\001\002\000\006\003\227\031\226\001\002" +
    "\000\004\031\224\001\002\000\004\034\202\001\002\000" +
    "\054\003\uffad\006\uffad\007\uffad\021\uffad\030\uffad\035\uffad" +
    "\062\uffad\063\uffad\065\uffad\067\uffad\070\uffad\071\uffad\101" +
    "\uffad\103\uffad\104\uffad\105\uffad\110\uffad\115\uffad\123\uffad" +
    "\125\uffad\126\uffad\001\002\000\004\034\202\001\002\000" +
    "\054\003\uffac\006\uffac\007\uffac\021\uffac\030\uffac\035\uffac" +
    "\062\uffac\063\uffac\065\uffac\067\uffac\070\uffac\071\uffac\101" +
    "\uffac\103\uffac\104\uffac\105\uffac\110\uffac\115\uffac\123\uffac" +
    "\125\uffac\126\uffac\001\002\000\054\003\uffb0\006\uffb0\007" +
    "\uffb0\021\uffb0\030\uffb0\035\uffb0\062\uffb0\063\uffb0\065\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\101\uffb0\103\uffb0\104\uffb0\105" +
    "\uffb0\110\uffb0\115\uffb0\123\uffb0\125\uffb0\126\uffb0\001\002" +
    "\000\004\035\uffe7\001\002\000\054\003\uffdb\006\uffdb\007" +
    "\uffdb\021\uffdb\030\uffdb\035\uffdb\062\uffdb\063\uffdb\065\uffdb" +
    "\067\uffdb\070\uffdb\071\uffdb\101\uffdb\103\uffdb\104\uffdb\105" +
    "\uffdb\110\uffdb\115\uffdb\123\uffdb\125\uffdb\126\uffdb\001\002" +
    "\000\054\003\uffe3\006\uffe3\007\uffe3\021\uffe3\030\uffe3\035" +
    "\uffe3\062\uffe3\063\uffe3\065\uffe3\067\uffe3\070\uffe3\071\uffe3" +
    "\101\uffe3\103\uffe3\104\uffe3\105\uffe3\110\uffe3\115\uffe3\123" +
    "\uffe3\125\uffe3\126\uffe3\001\002\000\022\002\uffec\003\uffec" +
    "\067\uffec\070\uffec\104\uffec\105\uffec\110\uffec\121\uffec\001" +
    "\002\000\020\006\030\007\033\021\037\030\040\031\237" +
    "\062\035\063\027\001\002\000\004\031\241\001\002\000" +
    "\004\005\240\001\002\000\054\003\uffd4\006\uffd4\007\uffd4" +
    "\021\uffd4\030\uffd4\035\uffd4\062\uffd4\063\uffd4\065\uffd4\067" +
    "\uffd4\070\uffd4\071\uffd4\101\uffd4\103\uffd4\104\uffd4\105\uffd4" +
    "\110\uffd4\115\uffd4\123\uffd4\125\uffd4\126\uffd4\001\002\000" +
    "\004\005\242\001\002\000\054\003\uffd5\006\uffd5\007\uffd5" +
    "\021\uffd5\030\uffd5\035\uffd5\062\uffd5\063\uffd5\065\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\101\uffd5\103\uffd5\104\uffd5\105\uffd5" +
    "\110\uffd5\115\uffd5\123\uffd5\125\uffd5\126\uffd5\001\002\000" +
    "\016\006\030\007\033\021\037\030\040\062\035\063\027" +
    "\001\002\000\004\031\245\001\002\000\004\034\202\001" +
    "\002\000\056\003\uffb3\006\uffb3\007\uffb3\021\uffb3\030\uffb3" +
    "\035\uffb3\062\uffb3\063\uffb3\065\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\075\250\101\uffb3\103\uffb3\104\uffb3\105\uffb3\110\uffb3" +
    "\115\uffb3\123\uffb3\125\uffb3\126\uffb3\001\002\000\054\003" +
    "\uffb2\006\uffb2\007\uffb2\021\uffb2\030\uffb2\035\uffb2\062\uffb2" +
    "\063\uffb2\065\uffb2\067\uffb2\070\uffb2\071\uffb2\101\uffb2\103" +
    "\uffb2\104\uffb2\105\uffb2\110\uffb2\115\uffb2\123\uffb2\125\uffb2" +
    "\126\uffb2\001\002\000\004\003\251\001\002\000\054\003" +
    "\uffb1\006\uffb1\007\uffb1\021\uffb1\030\uffb1\035\uffb1\062\uffb1" +
    "\063\uffb1\065\uffb1\067\uffb1\070\uffb1\071\uffb1\101\uffb1\103" +
    "\uffb1\104\uffb1\105\uffb1\110\uffb1\115\uffb1\123\uffb1\125\uffb1" +
    "\126\uffb1\001\002\000\016\003\254\006\030\007\033\030" +
    "\063\062\035\063\027\001\002\000\030\022\051\023\050" +
    "\024\042\025\055\026\044\027\054\031\301\040\061\041" +
    "\045\042\052\043\057\001\002\000\004\031\255\001\002" +
    "\000\004\034\256\001\002\000\006\066\263\072\257\001" +
    "\002\000\006\003\275\036\276\001\002\000\004\035\uffa2" +
    "\001\002\000\010\035\uffa3\066\263\072\257\001\002\000" +
    "\004\035\273\001\002\000\010\003\265\063\264\067\266" +
    "\001\002\000\004\036\271\001\002\000\010\035\uff9f\066" +
    "\uff9f\072\uff9f\001\002\000\004\036\267\001\002\000\004" +
    "\034\202\001\002\000\010\035\uffa0\066\uffa0\072\uffa0\001" +
    "\002\000\004\034\202\001\002\000\010\035\uffa1\066\uffa1" +
    "\072\uffa1\001\002\000\054\003\uffa5\006\uffa5\007\uffa5\021" +
    "\uffa5\030\uffa5\035\uffa5\062\uffa5\063\uffa5\065\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\101\uffa5\103\uffa5\104\uffa5\105\uffa5\110" +
    "\uffa5\115\uffa5\123\uffa5\125\uffa5\126\uffa5\001\002\000\004" +
    "\035\uffa4\001\002\000\004\035\uff9d\001\002\000\004\034" +
    "\202\001\002\000\006\003\300\035\uff9e\001\002\000\004" +
    "\035\uff9c\001\002\000\004\034\302\001\002\000\006\066" +
    "\263\072\257\001\002\000\004\035\304\001\002\000\054" +
    "\003\uffa6\006\uffa6\007\uffa6\021\uffa6\030\uffa6\035\uffa6\062" +
    "\uffa6\063\uffa6\065\uffa6\067\uffa6\070\uffa6\071\uffa6\101\uffa6" +
    "\103\uffa6\104\uffa6\105\uffa6\110\uffa6\115\uffa6\123\uffa6\125" +
    "\uffa6\126\uffa6\001\002\000\054\003\uffa7\006\uffa7\007\uffa7" +
    "\021\uffa7\030\uffa7\035\uffa7\062\uffa7\063\uffa7\065\uffa7\067" +
    "\uffa7\070\uffa7\071\uffa7\101\uffa7\103\uffa7\104\uffa7\105\uffa7" +
    "\110\uffa7\115\uffa7\123\uffa7\125\uffa7\126\uffa7\001\002\000" +
    "\020\006\030\007\033\021\037\030\040\031\310\062\035" +
    "\063\027\001\002\000\004\031\312\001\002\000\004\034" +
    "\202\001\002\000\054\003\uffa8\006\uffa8\007\uffa8\021\uffa8" +
    "\030\uffa8\035\uffa8\062\uffa8\063\uffa8\065\uffa8\067\uffa8\070" +
    "\uffa8\071\uffa8\101\uffa8\103\uffa8\104\uffa8\105\uffa8\110\uffa8" +
    "\115\uffa8\123\uffa8\125\uffa8\126\uffa8\001\002\000\004\034" +
    "\202\001\002\000\054\003\uffa9\006\uffa9\007\uffa9\021\uffa9" +
    "\030\uffa9\035\uffa9\062\uffa9\063\uffa9\065\uffa9\067\uffa9\070" +
    "\uffa9\071\uffa9\101\uffa9\103\uffa9\104\uffa9\105\uffa9\110\uffa9" +
    "\115\uffa9\123\uffa9\125\uffa9\126\uffa9\001\002\000\004\035" +
    "\uffe6\001\002\000\054\003\uffda\006\uffda\007\uffda\021\uffda" +
    "\030\uffda\035\uffda\062\uffda\063\uffda\065\uffda\067\uffda\070" +
    "\uffda\071\uffda\101\uffda\103\uffda\104\uffda\105\uffda\110\uffda" +
    "\115\uffda\123\uffda\125\uffda\126\uffda\001\002\000\010\003" +
    "\321\031\320\062\317\001\002\000\004\031\325\001\002" +
    "\000\004\005\324\001\002\000\004\031\322\001\002\000" +
    "\004\005\323\001\002\000\054\003\uffd6\006\uffd6\007\uffd6" +
    "\021\uffd6\030\uffd6\035\uffd6\062\uffd6\063\uffd6\065\uffd6\067" +
    "\uffd6\070\uffd6\071\uffd6\101\uffd6\103\uffd6\104\uffd6\105\uffd6" +
    "\110\uffd6\115\uffd6\123\uffd6\125\uffd6\126\uffd6\001\002\000" +
    "\054\003\uffd8\006\uffd8\007\uffd8\021\uffd8\030\uffd8\035\uffd8" +
    "\062\uffd8\063\uffd8\065\uffd8\067\uffd8\070\uffd8\071\uffd8\101" +
    "\uffd8\103\uffd8\104\uffd8\105\uffd8\110\uffd8\115\uffd8\123\uffd8" +
    "\125\uffd8\126\uffd8\001\002\000\004\005\326\001\002\000" +
    "\054\003\uffd7\006\uffd7\007\uffd7\021\uffd7\030\uffd7\035\uffd7" +
    "\062\uffd7\063\uffd7\065\uffd7\067\uffd7\070\uffd7\071\uffd7\101" +
    "\uffd7\103\uffd7\104\uffd7\105\uffd7\110\uffd7\115\uffd7\123\uffd7" +
    "\125\uffd7\126\uffd7\001\002\000\006\004\330\031\uffe9\001" +
    "\002\000\016\003\012\031\uffe8\067\014\104\004\105\005" +
    "\110\015\001\002\000\004\031\uffea\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\000\001\002\000\004\030\335" +
    "\001\002\000\016\003\012\031\uffe8\067\014\104\004\105" +
    "\005\110\015\001\002\000\004\031\337\001\002\000\004" +
    "\034\340\001\002\000\052\003\171\006\030\007\033\021" +
    "\037\030\040\062\035\063\027\065\166\067\014\070\016" +
    "\071\147\101\172\103\157\104\004\105\005\110\015\115" +
    "\156\123\153\125\146\126\160\001\002\000\004\035\342" +
    "\001\002\000\022\002\uffeb\003\uffeb\067\uffeb\070\uffeb\104" +
    "\uffeb\105\uffeb\110\uffeb\121\uffeb\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\012\003\005\004\012\006\010\007\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\005" +
    "\004\012\006\010\007\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\005\004\012\006\010\007\331" +
    "\001\001\000\002\001\001\000\006\005\135\010\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\016" +
    "\001\001\000\006\005\021\010\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\030\015\040\017\025\020" +
    "\033\033\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\112\017\114\033\031\001\001\000" +
    "\010\015\105\017\104\033\031\001\001\000\002\001\001" +
    "\000\006\015\103\033\031\001\001\000\006\015\102\033" +
    "\031\001\001\000\006\015\101\033\031\001\001\000\006" +
    "\015\100\033\031\001\001\000\006\015\077\033\031\001" +
    "\001\000\006\015\076\033\031\001\001\000\006\015\075" +
    "\033\031\001\001\000\006\015\074\033\031\001\001\000" +
    "\006\015\073\033\031\001\001\000\006\015\072\033\031" +
    "\001\001\000\006\015\071\033\031\001\001\000\006\015" +
    "\070\033\031\001\001\000\006\015\067\033\031\001\001" +
    "\000\006\015\066\033\031\001\001\000\006\015\065\033" +
    "\031\001\001\000\006\015\061\033\031\001\001\000\002" +
    "\001\001\000\006\015\063\033\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\112\017\113\033\031\001\001\000\010\015\112" +
    "\017\111\033\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\040\017\025\020\121\033" +
    "\031\034\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\040\017\025\020\127\033\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\141\012\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\167\004\151\013" +
    "\160\015\040\016\147\017\025\020\163\021\150\022\161" +
    "\023\153\024\162\031\166\032\164\033\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\167\004\151" +
    "\013\313\015\040\016\147\017\025\020\163\021\150\022" +
    "\161\023\153\024\162\031\166\032\164\033\154\001\001" +
    "\000\002\001\001\000\006\005\135\010\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\167\004\151\013\230\015\040\016\147\017\025" +
    "\020\163\021\150\022\161\023\153\024\162\031\166\032" +
    "\164\033\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\040\017\025\020\174\033" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\040\017\025\020\204\033\031\001\001\000\004\025" +
    "\200\001\001\000\002\001\001\000\036\003\167\004\151" +
    "\013\202\015\040\016\147\017\025\020\163\021\150\022" +
    "\161\023\153\024\162\031\166\032\164\033\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\040\017\025\020\206\033\031\001\001\000\002" +
    "\001\001\000\004\025\210\001\001\000\002\001\001\000" +
    "\012\015\040\017\025\020\212\033\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\040\017\025\020" +
    "\215\033\031\001\001\000\002\001\001\000\004\025\217" +
    "\001\001\000\002\001\001\000\012\015\040\017\025\020" +
    "\221\033\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\224\001\001\000\002\001\001\000\004\025" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\040\017\025\020\235\033\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\040\017\025" +
    "\020\243\033\031\001\001\000\002\001\001\000\004\025" +
    "\245\001\001\000\004\035\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\252\033" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\261\027\260\030\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\273\027\260" +
    "\030\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\267\001\001\000\002\001\001\000\004\025\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\302" +
    "\027\260\030\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\040\017\025\020\306" +
    "\033\031\001\001\000\002\001\001\000\004\025\310\001" +
    "\001\000\002\001\001\000\004\025\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\141\012\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\141" +
    "\012\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\167\004\151\013\340\015\040\016\147\017\025" +
    "\020\163\021\150\022\161\023\153\024\162\031\166\032" +
    "\164\033\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol sym = (Symbol) info;
            TokenInfo tokenInf = (TokenInfo) sym.value;
            if(!message.equals("Syntax error")){
                System.err.printf("Syntax Error: %s near token %s at line %d, column %d%n",
                        message, tokenInf.value, tokenInf.line, tokenInf.column);
            }
            else{
                System.err.printf("Syntax Error: related with token %s at line %d, column %d%n",
                        tokenInf.value, tokenInf.line, tokenInf.column);
            }

        } else {
            System.err.println("Syntax Error: " + message);
        }
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error: Unable to continue parsing.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // default_block ::= DEFAULT COLON statement_block error 
            {
              Object RESULT = null;
		parser.report_error("Only one default is permitted", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(22/*default_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // default_block ::= DEFAULT error 
            {
              Object RESULT = null;
		parser.report_error("Default block error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(22/*default_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // default_block ::= DEFAULT COLON statement_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(22/*default_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // case_block ::= CASE error 
            {
              Object RESULT = null;
		parser.report_error("Case block error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(21/*case_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // case_block ::= CASE CHAR COLON statement_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(21/*case_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // case_block ::= CASE NUM COLON statement_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(21/*case_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // case_blocks ::= default_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(20/*case_blocks*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // case_blocks ::= case_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(20/*case_blocks*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_blocks ::= case_block case_blocks 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(20/*case_blocks*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // switch_statement ::= SWITCH LPAREN error RPAREN LBRACE case_blocks RBRACE 
            {
              Object RESULT = null;
		parser.report_error("Switch structure error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(18/*switch_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // switch_statement ::= SWITCH LPAREN arithmeticExpression RPAREN LBRACE case_blocks RBRACE 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(18/*switch_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // while_statement ::= WHILE error 
            {
              Object RESULT = null;
		parser.report_error("While structure error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(17/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // while_statement ::= WHILE LPAREN RPAREN statement_block 
            {
              Object RESULT = null;
		parser.report_error("While expression can't be empty", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(17/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // while_statement ::= WHILE LPAREN expression RPAREN statement_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(17/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_statement ::= FOR error 
            {
              Object RESULT = null;
		parser.report_error("For structure error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // for_statement ::= FOR LPAREN error RPAREN statement_block 
            {
              Object RESULT = null;
		parser.report_error("For expression error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for_statement ::= FOR LPAREN expression SEMICOLON expression SEMICOLON expression error 
            {
              Object RESULT = null;
		parser.report_error("For body error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // for_statement ::= FOR LPAREN expression SEMICOLON expression SEMICOLON error RPAREN statement_block 
            {
              Object RESULT = null;
		parser.report_error("For third expression error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for_statement ::= FOR LPAREN expression SEMICOLON error SEMICOLON expression RPAREN statement_block 
            {
              Object RESULT = null;
		parser.report_error("For second expression error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for_statement ::= FOR LPAREN error SEMICOLON expression SEMICOLON expression RPAREN statement_block 
            {
              Object RESULT = null;
		parser.report_error("For first expression error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for_statement ::= FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statement_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if_statement ::= IF LPAREN expression RPAREN statement_block ELSE error 
            {
              Object RESULT = null;
		 parser.report_error("Error: Uso duplicado de 'else' en 'if'.", parser.scan()); 
              CUP$CParser$result = new java_cup.runtime.Symbol(15/*if_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // if_statement ::= IF LPAREN expression RPAREN statement_block else_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(15/*if_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if_statement ::= IF LPAREN expression RPAREN statement_block 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(15/*if_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // booleanExpression ::= LPAREN booleanExpression RPAREN 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // booleanExpression ::= NOT booleanExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // booleanExpression ::= booleanExpression ANDAND booleanExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // booleanExpression ::= booleanExpression OROR booleanExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // booleanExpression ::= arithmeticExpression LESS arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // booleanExpression ::= arithmeticExpression LESSEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // booleanExpression ::= arithmeticExpression GREATER arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // booleanExpression ::= arithmeticExpression GREATEREQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // booleanExpression ::= arithmeticExpression NOTEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // booleanExpression ::= arithmeticExpression EQUALS arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(13/*booleanExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arithmeticExpression ::= LPAREN arithmeticExpression RPAREN 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arithmeticExpression ::= function_call 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arithmeticExpression ::= ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arithmeticExpression ::= NUM 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arithmeticExpression ::= DECREMENT ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arithmeticExpression ::= INCREMENT ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arithmeticExpression ::= ID DECREMENT 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arithmeticExpression ::= ID INCREMENT 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arithmeticExpression ::= arithmeticExpression DIVIDEEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arithmeticExpression ::= arithmeticExpression TIMESEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arithmeticExpression ::= arithmeticExpression MINUSEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arithmeticExpression ::= arithmeticExpression PLUSEQUAL arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arithmeticExpression ::= arithmeticExpression ASSIGN arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arithmeticExpression ::= arithmeticExpression MODULO arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arithmeticExpression ::= arithmeticExpression DIVIDE arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arithmeticExpression ::= arithmeticExpression TIMES arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arithmeticExpression ::= arithmeticExpression MINUS arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arithmeticExpression ::= arithmeticExpression PLUS arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(11/*arithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= arithmeticExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= booleanExpression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(14/*expression*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_call ::= ID LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(25/*function_call*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_call ::= ID LPAREN params RPAREN 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(25/*function_call*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // write_statement ::= WRITE LPAREN RPAREN SEMICOLON 
            {
              Object RESULT = null;
		parser.report_error("Invalid parameters in write", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(24/*write_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // write_statement ::= WRITE LPAREN expression RPAREN SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(24/*write_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // read_statement ::= READ LPAREN error RPAREN SEMICOLON 
            {
              Object RESULT = null;
		parser.report_error("Invalid parameters in read", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(23/*read_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // read_statement ::= READ LPAREN ID RPAREN SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(23/*read_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // read_statement ::= READ LPAREN RPAREN SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(23/*read_statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_block ::= LBRACE funcImpl RBRACE 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(19/*statement_block*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= CONTINUE SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= BREAK SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= function_call 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= read_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= write_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= switch_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= while_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= for_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= if_statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= expression SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(12/*statement*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcImpl ::= error 
            {
              Object RESULT = null;
		parser.report_error("Function implementation error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(9/*funcImpl*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcImpl ::= statement 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(9/*funcImpl*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcImpl ::= statement funcImpl 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(9/*funcImpl*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcImpl ::= varDeclaration funcImpl 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(9/*funcImpl*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paramChain ::= 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(8/*paramChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paramChain ::= type ID 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(8/*paramChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paramChain ::= type ID COMMA paramChain 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(8/*paramChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcDeclaration ::= VOID ID LPAREN paramChain RPAREN LBRACE funcImpl RBRACE 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(4/*funcDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcDeclaration ::= type ID LPAREN paramChain RPAREN LBRACE funcImpl RBRACE 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(4/*funcDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignationChain ::= error 
            {
              Object RESULT = null;
		parser.report_error("Assignation error", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(7/*asignationChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asignationChain ::= expression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(7/*asignationChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asignationChain ::= asignationChain COMMA expression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(7/*asignationChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // idChain ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-0)).value;
		
                // Create a new list with a single ID
                List<String> ids = new ArrayList<>();
                ids.add((String) id);
                RESULT = ids;
             
              CUP$CParser$result = new java_cup.runtime.Symbol(3/*idChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // idChain ::= idChain COMMA ID 
            {
              Object RESULT = null;
		int chainleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int chainright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object chain = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-0)).value;
		
                // Use chain's result and add the new ID
              ((List<String>)chain).add((String) id);
                RESULT = chain;
             
              CUP$CParser$result = new java_cup.runtime.Symbol(3/*idChain*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varAsignation ::= idChain ASSIGN asignationChain 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(6/*varAsignation*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // params ::= CHAR 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(26/*params*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // params ::= expression 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(26/*params*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= error 
            {
              Object RESULT = null;
		parser.report_error("Invalid type", parser.scan());
              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= SHORT 
            {
              Object RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-0)).value;
		RESULT = (String)type; 
              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= LONG 
            {
              Object RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-0)).value;
		RESULT = (String)type; 
              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= CHAR 
            {
              Object RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-0)).value;
		RESULT = (String)type; 
              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= INT 
            {
              Object RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-0)).value;
		RESULT = (String)type; 
              CUP$CParser$result = new java_cup.runtime.Symbol(2/*type*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDeclaration ::= type varAsignation SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(1/*varDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // varDeclaration ::= CONST type varAsignation SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(1/*varDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varDeclaration ::= type idChain SEMICOLON 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(1/*varDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // varDeclaration ::= CONST type idChain SEMICOLON 
            {
              Object RESULT = null;
		int val1left = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
    for(String id: (List<String>)val2){
        System.out.println("const " + val1 + " " + id +";");
    }

              CUP$CParser$result = new java_cup.runtime.Symbol(1/*varDeclaration*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globalProg ::= funcDeclaration 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(5/*globalProg*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globalProg ::= funcDeclaration globalProg 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(5/*globalProg*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= globalProg EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // globalProg ::= varDeclaration globalProg 
            {
              Object RESULT = null;

              CUP$CParser$result = new java_cup.runtime.Symbol(5/*globalProg*/, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-0)).right, RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

